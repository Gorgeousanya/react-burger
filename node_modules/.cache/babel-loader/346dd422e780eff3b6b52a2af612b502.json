{"ast":null,"code":"import{setCookie,deleteCookie,getCookie,checkResponse}from'../utils';import{baseUrl}from'../../utils/api';export var REGISTER_REQUEST=\"REGISTER_REQUEST\";export var REGISTER_SUCCESS=\"REGISTER_SUCCESS\";export var REGISTER_ERROR=\"REGISTER_ERROR\";export var LOGIN_REQUEST=\"LOGIN_REQUEST\";export var LOGIN_SUCCESS=\"LOGIN_SUCCESS\";export var LOGIN_ERROR=\"LOGIN_ERROR\";export var UPDATE_TOKEN_REQUEST=\"UPDATE_TOKEN_REQUEST\";export var UPDATE_TOKEN_SUCCESS=\"UPDATE_TOKEN_SUCCESS\";export var UPDATE_TOKEN_ERROR=\"UPDATE_TOKEN_ERROR\";export var LOGOUT_REQUEST=\"LOGOUT_REQUEST\";export var LOGOUT_SUCCESS=\"LOGOUT_SUCCESS\";export var LOGOUT_ERROR=\"LOGOUT_ERROR\";export var USER_REQUEST=\"USER_REQUEST\";export var USER_SUCCESS=\"USER_SUCCESS\";export var USER_ERROR=\"USER_ERROR\";export var UPDATE_USER_REQUEST=\"UPDATE_USER_REQUEST\";export var UPDATE_USER_SUCCESS=\"UPDATE_USER_SUCCESS\";export var UPDATE_USER_ERROR=\"UPDATE_USER_ERROR\";export var FORGOT_PASSWORD_REQUEST=\"FORGOT_PASSWORD_REQUEST\";export var FORGOT_PASSWORD_SUCCESS=\"FORGOT_PASSWORD_SUCCESS\";export var FORGOT_PASSWORD_ERROR=\"FORGOT_PASSWORD_ERROR\";export var RESET_PASSWORD_REQUEST=\"RESET_PASSWORD_REQUEST\";export var RESET_PASSWORD_SUCCESS=\"RESET_PASSWORD_SUCCESS\";export var RESET_PASSWORD_ERROR=\"RESET_PASSWORD_ERROR\";var registerRequestAction=function registerRequestAction(){return{type:REGISTER_REQUEST};};var registerSuccessAction=function registerSuccessAction(user){return{type:REGISTER_SUCCESS,user:user};};var registerErrorAction=function registerErrorAction(){return{type:REGISTER_ERROR};};var loginRequestAction=function loginRequestAction(){return{type:LOGIN_REQUEST};};var loginSuccessAction=function loginSuccessAction(user){return{type:LOGIN_SUCCESS,user:user};};var loginErrorAction=function loginErrorAction(){return{type:LOGIN_ERROR};};var updateTokenRequestAction=function updateTokenRequestAction(){return{type:UPDATE_TOKEN_REQUEST};};var updateTokenSuccessAction=function updateTokenSuccessAction(){return{type:UPDATE_TOKEN_SUCCESS};};var updateTokenErrorAction=function updateTokenErrorAction(){return{type:UPDATE_TOKEN_ERROR};};var logoutRequestAction=function logoutRequestAction(){return{type:LOGOUT_REQUEST};};var logoutSuccessAction=function logoutSuccessAction(){return{type:LOGOUT_SUCCESS};};var logoutErrorAction=function logoutErrorAction(){return{type:LOGOUT_ERROR};};var userRequestAction=function userRequestAction(){return{type:USER_REQUEST};};var userSuccessAction=function userSuccessAction(user){return{type:USER_SUCCESS,user:user};};var userErrorAction=function userErrorAction(){return{type:USER_ERROR};};var updateUserRequestAction=function updateUserRequestAction(){return{type:UPDATE_USER_REQUEST};};var updateUserSuccessAction=function updateUserSuccessAction(user){return{type:UPDATE_USER_SUCCESS,user:user};};var updateUserErrorAction=function updateUserErrorAction(){return{type:UPDATE_USER_ERROR};};var forgotPasswordRequestAction=function forgotPasswordRequestAction(){return{type:FORGOT_PASSWORD_REQUEST};};var forgotPasswordSuccessAction=function forgotPasswordSuccessAction(){return{type:FORGOT_PASSWORD_SUCCESS};};var forgotPasswordErrorAction=function forgotPasswordErrorAction(){return{type:FORGOT_PASSWORD_ERROR};};var resetPasswordRequestAction=function resetPasswordRequestAction(){return{type:RESET_PASSWORD_REQUEST};};var resetPasswordSuccessAction=function resetPasswordSuccessAction(){return{type:RESET_PASSWORD_SUCCESS};};var resetPasswordErrorAction=function resetPasswordErrorAction(){return{type:RESET_PASSWORD_ERROR};};export var register=function register(email,password,name){return function(dispatch){dispatch(registerRequestAction());fetch(baseUrl+\"auth/register\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password,name:name})}).then(checkResponse).then(function(res){if(res.success){setCookie('token',res.accessToken);localStorage.setItem('refreshToken',res.refreshToken);dispatch(registerSuccessAction(res.user));}else dispatch(registerErrorAction());}).catch(function(err){console.log(err);dispatch(registerErrorAction());});};};export var login=function login(email,password){return function(dispatch){dispatch(loginRequestAction());fetch(baseUrl+\"auth/login\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({\"email\":email,\"password\":password})}).then(checkResponse).then(function(data){if(data.success){setCookie('token',data.accessToken);localStorage.setItem('refreshToken',data.refreshToken);dispatch(loginSuccessAction(data.user));}else{dispatch(loginErrorAction());}}).catch(function(err){console.log(err);dispatch(loginErrorAction());});};};export var updateToken=function updateToken(){return function(dispatch){dispatch(updateTokenRequestAction());fetch(baseUrl+\"auth/token\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({token:localStorage.getItem('refreshToken')})}).then(checkResponse).then(function(res){if(res.success){setCookie('token',res.accessToken);localStorage.setItem('refreshToken',res.refreshToken);dispatch(updateTokenSuccessAction());}}).catch(function(err){console.log(err);dispatch(updateTokenErrorAction());});};};export var logout=function logout(){return function(dispatch){dispatch(logoutRequestAction());fetch(baseUrl+\"auth/logout\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({token:localStorage.getItem('refreshToken')})}).then(checkResponse).then(function(data){if(data.success){localStorage.removeItem('refreshToken');deleteCookie('token');dispatch(logoutSuccessAction());}else{dispatch(logoutErrorAction());}}).catch(function(err){console.log(err);dispatch(logoutErrorAction());});};};export var getUser=function getUser(){return function(dispatch){dispatch(userRequestAction());fetch(baseUrl+\"auth/user\",{method:\"GET\",headers:{\"Content-Type\":\"application/json\",Authorization:\"\".concat(getCookie('token'))}}).then(checkResponse).then(function(data){if(data.success){dispatch(userSuccessAction(data.user));}}).catch(function(err){console.log(err);// if (localStorage.getItem('refreshToken')) {\n//     dispatch(updateToken());\n//     dispatch(getUser());\n// } else {\ndispatch(userErrorAction());// }\n});};};export var updateUser=function updateUser(email,name){return function(dispatch){dispatch(updateUserRequestAction());fetch(baseUrl+\"auth/user\",{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\",Authorization:\"\".concat(getCookie('token'))},body:JSON.stringify({email:email,name:name})}).then(checkResponse).then(function(data){console.log(data);if(data.success){dispatch(updateUserSuccessAction(data.user));}}).catch(function(err){console.log(err);if(localStorage.getItem('refreshToken')){dispatch(updateToken());dispatch(updateUser(email,name));}else{dispatch(updateUserErrorAction());}});};};export var forgotPassword=function forgotPassword(email){return function(dispatch){dispatch(forgotPasswordRequestAction());fetch(baseUrl+\"password-reset\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email})}).then(checkResponse).then(function(res){if(res.success){dispatch(forgotPasswordSuccessAction());}}).catch(function(err){console.log(err);dispatch(forgotPasswordErrorAction());});};};export var resetPassword=function resetPassword(password,token){return function(dispatch){dispatch(resetPasswordRequestAction());fetch(baseUrl+\"password-reset/reset\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({password:password,token:token})}).then(checkResponse).then(function(data){if(data.success){dispatch(resetPasswordSuccessAction());}}).catch(function(err){console.log(err);dispatch(resetPasswordErrorAction());});};};","map":{"version":3,"sources":["/Users/annaplokhotnyuk/Documents/react-burger/src/services/actions/auth.ts"],"names":["setCookie","deleteCookie","getCookie","checkResponse","baseUrl","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_ERROR","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","UPDATE_TOKEN_REQUEST","UPDATE_TOKEN_SUCCESS","UPDATE_TOKEN_ERROR","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_ERROR","USER_REQUEST","USER_SUCCESS","USER_ERROR","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","registerRequestAction","type","registerSuccessAction","user","registerErrorAction","loginRequestAction","loginSuccessAction","loginErrorAction","updateTokenRequestAction","updateTokenSuccessAction","updateTokenErrorAction","logoutRequestAction","logoutSuccessAction","logoutErrorAction","userRequestAction","userSuccessAction","userErrorAction","updateUserRequestAction","updateUserSuccessAction","updateUserErrorAction","forgotPasswordRequestAction","forgotPasswordSuccessAction","forgotPasswordErrorAction","resetPasswordRequestAction","resetPasswordSuccessAction","resetPasswordErrorAction","register","email","password","name","dispatch","fetch","method","headers","body","JSON","stringify","then","res","success","accessToken","localStorage","setItem","refreshToken","catch","err","console","log","login","data","updateToken","token","getItem","logout","removeItem","getUser","Authorization","updateUser","forgotPassword","resetPassword"],"mappings":"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","sourcesContent":["import {\n    setCookie,\n    deleteCookie,\n    getCookie,\n    checkResponse,\n    AppDispatch, \n    AppThunk\n} from '../utils';\nimport {\n    baseUrl\n} from '../../utils/api';\n\nexport const REGISTER_REQUEST: \"REGISTER_REQUEST\" = \"REGISTER_REQUEST\";\nexport const REGISTER_SUCCESS: \"REGISTER_SUCCESS\" = \"REGISTER_SUCCESS\";\nexport const REGISTER_ERROR: \"REGISTER_ERROR\" = \"REGISTER_ERROR\";\nexport const LOGIN_REQUEST: \"LOGIN_REQUEST\" = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS: \"LOGIN_SUCCESS\" = \"LOGIN_SUCCESS\";\nexport const LOGIN_ERROR: \"LOGIN_ERROR\" = \"LOGIN_ERROR\";\nexport const UPDATE_TOKEN_REQUEST: \"UPDATE_TOKEN_REQUEST\" = \"UPDATE_TOKEN_REQUEST\";\nexport const UPDATE_TOKEN_SUCCESS: \"UPDATE_TOKEN_SUCCESS\" = \"UPDATE_TOKEN_SUCCESS\";\nexport const UPDATE_TOKEN_ERROR: \"UPDATE_TOKEN_ERROR\" = \"UPDATE_TOKEN_ERROR\";\nexport const LOGOUT_REQUEST: \"LOGOUT_REQUEST\" = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS: \"LOGOUT_SUCCESS\" = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_ERROR: \"LOGOUT_ERROR\" = \"LOGOUT_ERROR\";\nexport const USER_REQUEST: \"USER_REQUEST\" = \"USER_REQUEST\";\nexport const USER_SUCCESS: \"USER_SUCCESS\" = \"USER_SUCCESS\";\nexport const USER_ERROR: \"USER_ERROR\" = \"USER_ERROR\";\nexport const UPDATE_USER_REQUEST: \"UPDATE_USER_REQUEST\" = \"UPDATE_USER_REQUEST\";\nexport const UPDATE_USER_SUCCESS: \"UPDATE_USER_SUCCESS\" = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_ERROR: \"UPDATE_USER_ERROR\" = \"UPDATE_USER_ERROR\";\nexport const FORGOT_PASSWORD_REQUEST: \"FORGOT_PASSWORD_REQUEST\" = \"FORGOT_PASSWORD_REQUEST\";\nexport const FORGOT_PASSWORD_SUCCESS: \"FORGOT_PASSWORD_SUCCESS\" = \"FORGOT_PASSWORD_SUCCESS\";\nexport const FORGOT_PASSWORD_ERROR: \"FORGOT_PASSWORD_ERROR\" = \"FORGOT_PASSWORD_ERROR\";\nexport const RESET_PASSWORD_REQUEST: \"RESET_PASSWORD_REQUEST\" = \"RESET_PASSWORD_REQUEST\";\nexport const RESET_PASSWORD_SUCCESS: \"RESET_PASSWORD_SUCCESS\" = \"RESET_PASSWORD_SUCCESS\";\nexport const RESET_PASSWORD_ERROR: \"RESET_PASSWORD_ERROR\" = \"RESET_PASSWORD_ERROR\";\n\nexport interface IRegisterRequestAction {\n    readonly type: typeof REGISTER_REQUEST;\n}\n\nexport interface IRegisterSuccessAction {\n    readonly type: typeof REGISTER_SUCCESS;\n    readonly user: {\n        name: string;\n        email: string;\n    };\n}\n\nexport interface IRegisterErrorAction {\n    readonly type: typeof REGISTER_ERROR;\n}\n\nexport interface ILoginRequestAction {\n    readonly type: typeof LOGIN_REQUEST;\n}\n\nexport interface ILoginSuccessAction {\n    readonly type: typeof LOGIN_SUCCESS;\n    readonly user: {\n        name: string;\n        email: string;\n    };\n}\n\nexport interface ILoginErrorAction {\n    readonly type: typeof LOGIN_ERROR;\n}\n\nexport interface IUpdateTokenRequestAction {\n    readonly type: typeof UPDATE_TOKEN_REQUEST;\n}\n\nexport interface IUpdateTokenSuccessAction {\n    readonly type: typeof UPDATE_TOKEN_SUCCESS;\n}\n\nexport interface IUpdateTokenErrorAction {\n    readonly type: typeof UPDATE_TOKEN_ERROR;\n}\n\nexport interface ILogoutRequestAction {\n    readonly type: typeof LOGOUT_REQUEST;\n}\n\nexport interface ILogoutSuccessAction {\n    readonly type: typeof LOGOUT_SUCCESS;\n}\n\nexport interface ILogoutErrorAction {\n    readonly type: typeof LOGOUT_ERROR;\n}\n\nexport interface IUserRequestAction {\n    readonly type: typeof USER_REQUEST;\n}\n\nexport interface IUserSuccessAction {\n    readonly type: typeof USER_SUCCESS;\n    readonly user: {\n        name: string;\n        email: string;\n    };\n}\n\nexport interface IUserErrorAction {\n    readonly type: typeof USER_ERROR;\n}\n\nexport interface IUpdateUserRequestAction {\n    readonly type: typeof UPDATE_USER_REQUEST;\n}\n\nexport interface IUpdateUserSuccessAction {\n    readonly type: typeof UPDATE_USER_SUCCESS;\n    readonly user: {\n        name: string;\n        email: string;\n    };\n}\n\nexport interface IUpdateUserErrorAction {\n    readonly type: typeof UPDATE_USER_ERROR;\n}\n\nexport interface IForgotPasswordRequestAction {\n    readonly type: typeof FORGOT_PASSWORD_REQUEST;\n}\n\nexport interface IForgotPasswordSuccessAction {\n    readonly type: typeof FORGOT_PASSWORD_SUCCESS;\n}\n\nexport interface IForgotPasswordErrorAction {\n    readonly type: typeof FORGOT_PASSWORD_ERROR;\n}\n\nexport interface IResetPasswordRequestAction {\n    readonly type: typeof RESET_PASSWORD_REQUEST;\n}\n\nexport interface IResetPasswordSuccessAction {\n    readonly type: typeof RESET_PASSWORD_SUCCESS;\n}\n\nexport interface IResetPasswordErrorAction {\n    readonly type: typeof RESET_PASSWORD_ERROR;\n}\n\nconst registerRequestAction = (): IRegisterRequestAction => ({ type: REGISTER_REQUEST });\nconst registerSuccessAction = (user: {\n    name: string;\n    email: string;\n}): IRegisterSuccessAction => ({ type: REGISTER_SUCCESS, user });\nconst registerErrorAction = (): IRegisterErrorAction => ({ type: REGISTER_ERROR });\nconst loginRequestAction = (): ILoginRequestAction => ({ type: LOGIN_REQUEST });\nconst loginSuccessAction = (user: {\n    name: string;\n    email: string;\n}): ILoginSuccessAction => ({ type: LOGIN_SUCCESS, user });\nconst loginErrorAction = (): ILoginErrorAction => ({ type: LOGIN_ERROR });\nconst updateTokenRequestAction = (): IUpdateTokenRequestAction => ({ type: UPDATE_TOKEN_REQUEST });\nconst updateTokenSuccessAction = (): IUpdateTokenSuccessAction => ({ type: UPDATE_TOKEN_SUCCESS });\nconst updateTokenErrorAction = (): IUpdateTokenErrorAction => ({ type: UPDATE_TOKEN_ERROR });\nconst logoutRequestAction = (): ILogoutRequestAction => ({ type: LOGOUT_REQUEST });\nconst logoutSuccessAction = (): ILogoutSuccessAction => ({ type: LOGOUT_SUCCESS });\nconst logoutErrorAction = (): ILogoutErrorAction => ({ type: LOGOUT_ERROR });\nconst userRequestAction = (): IUserRequestAction => ({ type: USER_REQUEST });\nconst userSuccessAction = (user: {\n    name: string;\n    email: string;\n}): IUserSuccessAction => ({ type: USER_SUCCESS, user });\nconst userErrorAction = (): IUserErrorAction => ({ type: USER_ERROR });\nconst updateUserRequestAction = (): IUpdateUserRequestAction => ({ type: UPDATE_USER_REQUEST });\nconst updateUserSuccessAction = (user: {\n    name: string;\n    email: string;\n}): IUpdateUserSuccessAction => ({ type: UPDATE_USER_SUCCESS, user });\nconst updateUserErrorAction = (): IUpdateUserErrorAction => ({ type: UPDATE_USER_ERROR });\nconst forgotPasswordRequestAction = (): IForgotPasswordRequestAction => ({ type: FORGOT_PASSWORD_REQUEST });\nconst forgotPasswordSuccessAction = (): IForgotPasswordSuccessAction => ({ type: FORGOT_PASSWORD_SUCCESS });\nconst forgotPasswordErrorAction = (): IForgotPasswordErrorAction => ({ type: FORGOT_PASSWORD_ERROR });\nconst resetPasswordRequestAction = (): IResetPasswordRequestAction => ({ type: RESET_PASSWORD_REQUEST });\nconst resetPasswordSuccessAction = (): IResetPasswordSuccessAction => ({ type: RESET_PASSWORD_SUCCESS });\nconst resetPasswordErrorAction = (): IResetPasswordErrorAction => ({ type: RESET_PASSWORD_ERROR });\n\nexport const register: AppThunk = (email: string, password: string, name: string) => {\n    return function (dispatch: AppDispatch) {\n        dispatch(registerRequestAction());\n        fetch(baseUrl + \"auth/register\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email,\n                    password,\n                    name\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    setCookie('token', res.accessToken);\n                    localStorage.setItem('refreshToken', res.refreshToken);\n                    dispatch(registerSuccessAction(res.user));\n                }\n                else dispatch(registerErrorAction())\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(registerErrorAction())\n            });\n    }\n}\n\nexport const login: AppThunk = (email: string, password: string) => {\n    return function (dispatch: AppDispatch) {\n        dispatch(loginRequestAction());\n        fetch(baseUrl + \"auth/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    \"email\": email,\n                    \"password\": password\n                }),\n            })\n            .then(checkResponse)\n            .then(data => {\n                if (data.success) {\n                    setCookie('token', data.accessToken);\n                    localStorage.setItem('refreshToken', data.refreshToken);\n                    dispatch(loginSuccessAction(data.user));\n                } else {\n                dispatch(loginErrorAction())}\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(loginErrorAction())\n            });\n    }\n}\n\nexport const updateToken: AppThunk = () => {\n    return function (dispatch: AppDispatch) {\n        dispatch(updateTokenRequestAction());\n        fetch(baseUrl + \"auth/token\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    token: localStorage.getItem('refreshToken')\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    setCookie('token', res.accessToken);\n                    localStorage.setItem('refreshToken', res.refreshToken);\n                    dispatch(updateTokenSuccessAction());\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(updateTokenErrorAction())\n            });\n    }\n}\n\nexport const logout: AppThunk = () => {\n    return function (dispatch: AppDispatch) {\n        dispatch(logoutRequestAction());\n        fetch(baseUrl + \"auth/logout\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    token: localStorage.getItem('refreshToken')\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    localStorage.removeItem('refreshToken');\n                    deleteCookie('token');\n                    dispatch(logoutSuccessAction());\n                }\n                else {\n                    dispatch(logoutErrorAction())\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(logoutErrorAction())\n            });\n    }\n}\n\nexport const getUser: AppThunk = () => {\n    return function (dispatch) {\n        dispatch(userRequestAction());\n        fetch(baseUrl + \"auth/user\", {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `${getCookie('token')}`,\n                },\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    dispatch(userSuccessAction(data.user));\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                // if (localStorage.getItem('refreshToken')) {\n                //     dispatch(updateToken());\n                //     dispatch(getUser());\n                // } else {\n                    dispatch(userErrorAction())\n                // }\n            });\n    }\n}\n\nexport const updateUser: AppThunk = (email: string, name: string) => {\n    return function (dispatch) {\n        dispatch(updateUserRequestAction());\n        fetch(baseUrl + \"auth/user\", {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `${getCookie('token')}`,\n                },\n                body: JSON.stringify({\n                    email,\n                    name\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                console.log(data)\n                if (data.success) {\n                    dispatch(updateUserSuccessAction(data.user));\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                if (localStorage.getItem('refreshToken')) {\n                    dispatch(updateToken());\n                    dispatch(updateUser(email, name));\n                } else {\n                    dispatch(updateUserErrorAction())\n                }\n            });\n    }\n}\n\nexport const forgotPassword: AppThunk = (email: string) => {\n    return function (dispatch: AppDispatch) {\n        dispatch(forgotPasswordRequestAction());\n        fetch(baseUrl + \"password-reset\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    dispatch(forgotPasswordSuccessAction());\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(forgotPasswordErrorAction())\n            });\n    }\n}\n\nexport const resetPassword: AppThunk = (password: string, token: string) => {\n    return function (dispatch: AppDispatch) {\n        dispatch(resetPasswordRequestAction());\n        fetch(baseUrl + \"password-reset/reset\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    password,\n                    token\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    dispatch(resetPasswordSuccessAction());\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(resetPasswordErrorAction())\n            });\n    }\n}\n\nexport type TAuthActions = \n    | IRegisterRequestAction\n    | IRegisterSuccessAction\n    | IRegisterErrorAction\n    | ILoginRequestAction\n    | ILoginSuccessAction\n    | ILoginErrorAction\n    | IUpdateTokenRequestAction\n    | IUpdateTokenSuccessAction\n    | IUpdateTokenErrorAction\n    | ILogoutRequestAction\n    | ILogoutSuccessAction\n    | ILogoutErrorAction\n    | IUserRequestAction\n    | IUserSuccessAction\n    | IUserErrorAction\n    | IUpdateUserRequestAction\n    | IUpdateUserSuccessAction\n    | IUpdateUserErrorAction\n    | IForgotPasswordRequestAction\n    | IForgotPasswordSuccessAction\n    | IForgotPasswordErrorAction\n    | IResetPasswordRequestAction\n    | IResetPasswordSuccessAction\n    | IResetPasswordErrorAction;"]},"metadata":{},"sourceType":"module"}