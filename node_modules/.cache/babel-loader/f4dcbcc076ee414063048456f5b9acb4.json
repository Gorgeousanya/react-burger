{"ast":null,"code":"import { REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_ERROR, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_ERROR, UPDATE_TOKEN_REQUEST, UPDATE_TOKEN_SUCCESS, UPDATE_TOKEN_ERROR, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_ERROR, USER_REQUEST, USER_SUCCESS, USER_ERROR, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_ERROR, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_ERROR, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_ERROR } from '../actions/auth';\nexport const authInitialState = {\n  user: {\n    name: '',\n    email: ''\n  },\n  registerRequest: false,\n  registerError: false,\n  loggedIn: undefined,\n  loginRequest: false,\n  loginError: false,\n  updateTokenRequest: false,\n  updateTokenError: false,\n  logoutRequest: false,\n  logoutError: false,\n  userRequest: false,\n  userError: false,\n  updateUserRequest: false,\n  updateUserError: false,\n  forgotPasswordRequest: false,\n  forgotPasswordError: false,\n  resetPasswordRequest: false,\n  resetPasswordError: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : authInitialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case REGISTER_REQUEST:\n      {\n        return { ...state,\n          registerRequest: true,\n          registerError: false\n        };\n      }\n\n    case REGISTER_SUCCESS:\n      {\n        return { ...state,\n          user: action.user,\n          registerRequest: false,\n          loggedIn: true\n        };\n      }\n\n    case REGISTER_ERROR:\n      {\n        return { ...state,\n          registerError: true,\n          registerRequest: false\n        };\n      }\n\n    case LOGIN_REQUEST:\n      {\n        return { ...state,\n          loginRequest: true,\n          loginError: false\n        };\n      }\n\n    case LOGIN_SUCCESS:\n      {\n        return { ...state,\n          user: action.user,\n          loginRequest: false,\n          loggedIn: true\n        };\n      }\n\n    case LOGIN_ERROR:\n      {\n        return { ...state,\n          loginError: true,\n          loginRequest: false\n        };\n      }\n\n    case UPDATE_TOKEN_REQUEST:\n      {\n        return { ...state,\n          updateTokenRequest: true,\n          updateTokenError: false\n        };\n      }\n\n    case UPDATE_TOKEN_SUCCESS:\n      {\n        return { ...state,\n          loggedIn: true,\n          updateTokenRequest: false\n        };\n      }\n\n    case UPDATE_TOKEN_ERROR:\n      {\n        return { ...state,\n          updateTokenError: true,\n          updateTokenRequest: false\n        };\n      }\n\n    case LOGOUT_REQUEST:\n      {\n        return { ...state,\n          logoutRequest: true,\n          logoutError: false\n        };\n      }\n\n    case LOGOUT_SUCCESS:\n      {\n        return { ...state,\n          loggedIn: false,\n          user: {\n            name: '',\n            email: ''\n          }\n        };\n      }\n\n    case LOGOUT_ERROR:\n      {\n        return { ...state,\n          logoutError: true,\n          logoutRequest: false\n        };\n      }\n\n    case USER_REQUEST:\n      {\n        return { ...state,\n          userRequest: true,\n          userError: false\n        };\n      }\n\n    case USER_SUCCESS:\n      {\n        return { ...state,\n          user: action.user,\n          loggedIn: true,\n          userRequest: false\n        };\n      }\n\n    case USER_ERROR:\n      {\n        return { ...state,\n          userError: true,\n          userRequest: false,\n          loggedIn: false\n        };\n      }\n\n    case UPDATE_USER_REQUEST:\n      {\n        return { ...state,\n          updateUserRequest: true,\n          updateUserError: false\n        };\n      }\n\n    case UPDATE_USER_SUCCESS:\n      {\n        return { ...state,\n          user: action.user,\n          updateUserRequest: false\n        };\n      }\n\n    case UPDATE_USER_ERROR:\n      {\n        return { ...state,\n          updateUserError: true,\n          updateUserRequest: false\n        };\n      }\n\n    case FORGOT_PASSWORD_REQUEST:\n      {\n        return { ...state,\n          forgotPasswordRequest: true,\n          forgotPasswordError: false\n        };\n      }\n\n    case FORGOT_PASSWORD_SUCCESS:\n      {\n        return { ...state,\n          forgotPasswordError: false,\n          forgotPasswordRequest: false\n        };\n      }\n\n    case FORGOT_PASSWORD_ERROR:\n      {\n        return { ...state,\n          forgotPasswordError: true,\n          forgotPasswordRequest: false\n        };\n      }\n\n    case RESET_PASSWORD_REQUEST:\n      {\n        return { ...state,\n          resetPasswordRequest: true,\n          resetPasswordError: false\n        };\n      }\n\n    case RESET_PASSWORD_SUCCESS:\n      {\n        return { ...state,\n          resetPasswordError: false,\n          resetPasswordRequest: false\n        };\n      }\n\n    case RESET_PASSWORD_ERROR:\n      {\n        return { ...state,\n          resetPasswordError: true,\n          resetPasswordRequest: false\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/annaplokhotnyuk/Documents/react-burger/src/services/reducers/auth.ts"],"names":["REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_ERROR","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","UPDATE_TOKEN_REQUEST","UPDATE_TOKEN_SUCCESS","UPDATE_TOKEN_ERROR","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_ERROR","USER_REQUEST","USER_SUCCESS","USER_ERROR","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","authInitialState","user","name","email","registerRequest","registerError","loggedIn","undefined","loginRequest","loginError","updateTokenRequest","updateTokenError","logoutRequest","logoutError","userRequest","userError","updateUserRequest","updateUserError","forgotPasswordRequest","forgotPasswordError","resetPasswordRequest","resetPasswordError","authReducer","state","action","type"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,gBAFJ,EAGIC,cAHJ,EAIIC,aAJJ,EAKIC,aALJ,EAMIC,WANJ,EAOIC,oBAPJ,EAQIC,oBARJ,EASIC,kBATJ,EAUIC,cAVJ,EAWIC,cAXJ,EAYIC,YAZJ,EAaIC,YAbJ,EAcIC,YAdJ,EAeIC,UAfJ,EAgBIC,mBAhBJ,EAiBIC,mBAjBJ,EAkBIC,iBAlBJ,EAmBIC,uBAnBJ,EAoBIC,uBApBJ,EAqBIC,qBArBJ,EAsBIC,sBAtBJ,EAuBIC,sBAvBJ,EAwBIC,oBAxBJ,QA0BQ,iBA1BR;AAoDI,OAAO,MAAMC,gBAAgB,GAAG;AAC5BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,EADJ;AAEFC,IAAAA,KAAK,EAAE;AAFL,GADsB;AAK5BC,EAAAA,eAAe,EAAE,KALW;AAM5BC,EAAAA,aAAa,EAAE,KANa;AAO5BC,EAAAA,QAAQ,EAAEC,SAPkB;AAQ5BC,EAAAA,YAAY,EAAE,KARc;AAS5BC,EAAAA,UAAU,EAAE,KATgB;AAU5BC,EAAAA,kBAAkB,EAAE,KAVQ;AAW5BC,EAAAA,gBAAgB,EAAE,KAXU;AAY5BC,EAAAA,aAAa,EAAE,KAZa;AAa5BC,EAAAA,WAAW,EAAE,KAbe;AAc5BC,EAAAA,WAAW,EAAE,KAde;AAe5BC,EAAAA,SAAS,EAAE,KAfiB;AAgB5BC,EAAAA,iBAAiB,EAAE,KAhBS;AAiB5BC,EAAAA,eAAe,EAAE,KAjBW;AAkB5BC,EAAAA,qBAAqB,EAAE,KAlBK;AAmB5BC,EAAAA,mBAAmB,EAAE,KAnBO;AAoB5BC,EAAAA,oBAAoB,EAAE,KApBM;AAqB5BC,EAAAA,kBAAkB,EAAE;AArBQ,CAAzB;AAwBP,OAAO,MAAMC,WAAW,GAAG,YAA+D;AAAA,MAA9DC,KAA8D,uEAAtDvB,gBAAsD;AAAA,MAApCwB,MAAoC;;AACtF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjD,gBAAL;AAAuB;AACnB,eAAO,EACH,GAAG+C,KADA;AAEHnB,UAAAA,eAAe,EAAE,IAFd;AAGHC,UAAAA,aAAa,EAAE;AAHZ,SAAP;AAKH;;AACG,SAAK5B,gBAAL;AAAuB;AACnB,eAAO,EACH,GAAG8C,KADA;AAEHtB,UAAAA,IAAI,EAAEuB,MAAM,CAACvB,IAFV;AAGHG,UAAAA,eAAe,EAAE,KAHd;AAIHE,UAAAA,QAAQ,EAAE;AAJP,SAAP;AAMH;;AACD,SAAK5B,cAAL;AAAqB;AACjB,eAAO,EACH,GAAG6C,KADA;AAEHlB,UAAAA,aAAa,EAAE,IAFZ;AAGHD,UAAAA,eAAe,EAAE;AAHd,SAAP;AAKH;;AACD,SAAKzB,aAAL;AAAoB;AAChB,eAAO,EACH,GAAG4C,KADA;AAEHf,UAAAA,YAAY,EAAE,IAFX;AAGHC,UAAAA,UAAU,EAAE;AAHT,SAAP;AAKH;;AACD,SAAK7B,aAAL;AAAoB;AAChB,eAAO,EACH,GAAG2C,KADA;AAEHtB,UAAAA,IAAI,EAAEuB,MAAM,CAACvB,IAFV;AAGHO,UAAAA,YAAY,EAAE,KAHX;AAIHF,UAAAA,QAAQ,EAAE;AAJP,SAAP;AAMH;;AACD,SAAKzB,WAAL;AAAkB;AACd,eAAO,EACH,GAAG0C,KADA;AAEHd,UAAAA,UAAU,EAAE,IAFT;AAGHD,UAAAA,YAAY,EAAE;AAHX,SAAP;AAKH;;AACD,SAAK1B,oBAAL;AAA2B;AACvB,eAAO,EACH,GAAGyC,KADA;AAEHb,UAAAA,kBAAkB,EAAE,IAFjB;AAGHC,UAAAA,gBAAgB,EAAE;AAHf,SAAP;AAKH;;AACD,SAAK5B,oBAAL;AAA2B;AACvB,eAAO,EACH,GAAGwC,KADA;AAEHjB,UAAAA,QAAQ,EAAE,IAFP;AAGHI,UAAAA,kBAAkB,EAAE;AAHjB,SAAP;AAKH;;AACD,SAAK1B,kBAAL;AAAyB;AACrB,eAAO,EACH,GAAGuC,KADA;AAEHZ,UAAAA,gBAAgB,EAAE,IAFf;AAGHD,UAAAA,kBAAkB,EAAE;AAHjB,SAAP;AAKH;;AACD,SAAKzB,cAAL;AAAqB;AACjB,eAAO,EACH,GAAGsC,KADA;AAEHX,UAAAA,aAAa,EAAE,IAFZ;AAGHC,UAAAA,WAAW,EAAE;AAHV,SAAP;AAKH;;AACD,SAAK3B,cAAL;AAAqB;AACjB,eAAO,EACH,GAAGqC,KADA;AAEHjB,UAAAA,QAAQ,EAAE,KAFP;AAGHL,UAAAA,IAAI,EAAE;AACFC,YAAAA,IAAI,EAAE,EADJ;AAEFC,YAAAA,KAAK,EAAE;AAFL;AAHH,SAAP;AAQH;;AACD,SAAKhB,YAAL;AAAmB;AACf,eAAO,EACH,GAAGoC,KADA;AAEHV,UAAAA,WAAW,EAAE,IAFV;AAGHD,UAAAA,aAAa,EAAE;AAHZ,SAAP;AAKH;;AACD,SAAKxB,YAAL;AAAmB;AACf,eAAO,EACH,GAAGmC,KADA;AAEHT,UAAAA,WAAW,EAAE,IAFV;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAAP;AAKH;;AACD,SAAK1B,YAAL;AAAmB;AACf,eAAO,EACH,GAAGkC,KADA;AAEHtB,UAAAA,IAAI,EAAEuB,MAAM,CAACvB,IAFV;AAGHK,UAAAA,QAAQ,EAAE,IAHP;AAIHQ,UAAAA,WAAW,EAAE;AAJV,SAAP;AAMH;;AACD,SAAKxB,UAAL;AAAiB;AACb,eAAO,EACH,GAAGiC,KADA;AAEHR,UAAAA,SAAS,EAAE,IAFR;AAGHD,UAAAA,WAAW,EAAE,KAHV;AAIHR,UAAAA,QAAQ,EAAE;AAJP,SAAP;AAMH;;AACD,SAAKf,mBAAL;AAA0B;AACtB,eAAO,EACH,GAAGgC,KADA;AAEHP,UAAAA,iBAAiB,EAAE,IAFhB;AAGHC,UAAAA,eAAe,EAAE;AAHd,SAAP;AAKH;;AACD,SAAKzB,mBAAL;AAA0B;AACtB,eAAO,EACH,GAAG+B,KADA;AAEHtB,UAAAA,IAAI,EAAEuB,MAAM,CAACvB,IAFV;AAGHe,UAAAA,iBAAiB,EAAE;AAHhB,SAAP;AAKH;;AACD,SAAKvB,iBAAL;AAAwB;AACpB,eAAO,EACH,GAAG8B,KADA;AAEHN,UAAAA,eAAe,EAAE,IAFd;AAGHD,UAAAA,iBAAiB,EAAE;AAHhB,SAAP;AAKH;;AACD,SAAKtB,uBAAL;AAA8B;AAC1B,eAAO,EACH,GAAG6B,KADA;AAEHL,UAAAA,qBAAqB,EAAE,IAFpB;AAGHC,UAAAA,mBAAmB,EAAE;AAHlB,SAAP;AAKH;;AACD,SAAKxB,uBAAL;AAA8B;AAC1B,eAAO,EACH,GAAG4B,KADA;AAEHJ,UAAAA,mBAAmB,EAAE,KAFlB;AAGHD,UAAAA,qBAAqB,EAAE;AAHpB,SAAP;AAKH;;AACD,SAAKtB,qBAAL;AAA4B;AACxB,eAAO,EACH,GAAG2B,KADA;AAEHJ,UAAAA,mBAAmB,EAAE,IAFlB;AAGHD,UAAAA,qBAAqB,EAAE;AAHpB,SAAP;AAKH;;AACD,SAAKrB,sBAAL;AAA6B;AACzB,eAAO,EACH,GAAG0B,KADA;AAEHH,UAAAA,oBAAoB,EAAE,IAFnB;AAGHC,UAAAA,kBAAkB,EAAE;AAHjB,SAAP;AAKH;;AACD,SAAKvB,sBAAL;AAA6B;AACzB,eAAO,EACH,GAAGyB,KADA;AAEHF,UAAAA,kBAAkB,EAAE,KAFjB;AAGHD,UAAAA,oBAAoB,EAAE;AAHnB,SAAP;AAKH;;AACD,SAAKrB,oBAAL;AAA2B;AACvB,eAAO,EACH,GAAGwB,KADA;AAEHF,UAAAA,kBAAkB,EAAE,IAFjB;AAGHD,UAAAA,oBAAoB,EAAE;AAHnB,SAAP;AAKH;;AACL;AACI,aAAOG,KAAP;AAjLR;AAmLH,CApLM","sourcesContent":["import {\n    REGISTER_REQUEST,\n    REGISTER_SUCCESS,\n    REGISTER_ERROR,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_ERROR,\n    UPDATE_TOKEN_REQUEST,\n    UPDATE_TOKEN_SUCCESS,\n    UPDATE_TOKEN_ERROR,\n    LOGOUT_REQUEST,\n    LOGOUT_SUCCESS,\n    LOGOUT_ERROR,\n    USER_REQUEST,\n    USER_SUCCESS,\n    USER_ERROR,\n    UPDATE_USER_REQUEST,\n    UPDATE_USER_SUCCESS,\n    UPDATE_USER_ERROR,\n    FORGOT_PASSWORD_REQUEST,\n    FORGOT_PASSWORD_SUCCESS,\n    FORGOT_PASSWORD_ERROR,\n    RESET_PASSWORD_REQUEST,\n    RESET_PASSWORD_SUCCESS,\n    RESET_PASSWORD_ERROR,\n    TAuthActions\n } from '../actions/auth';\n\n    export type TAuthState = {\n        user: {\n            name: string,\n            email: string\n        };\n        registerRequest: boolean;\n        registerError: boolean;\n        loggedIn: any;\n        loginRequest: boolean;\n        loginError: boolean;\n        updateTokenRequest: boolean;\n        updateTokenError: boolean;\n        logoutRequest: boolean;\n        logoutError: boolean;\n        userRequest: boolean;\n        userError: boolean;\n        updateUserRequest: boolean;\n        updateUserError: boolean;\n        forgotPasswordRequest: boolean;\n        forgotPasswordError: boolean;\n        resetPasswordRequest: boolean;\n        resetPasswordError: boolean;\n    };\n\n    export const authInitialState = { \n        user: {\n            name: '',\n            email: ''\n        },\n        registerRequest: false,\n        registerError: false,\n        loggedIn: undefined,\n        loginRequest: false,\n        loginError: false,\n        updateTokenRequest: false,\n        updateTokenError: false,\n        logoutRequest: false,\n        logoutError: false,\n        userRequest: false,\n        userError: false,\n        updateUserRequest: false,\n        updateUserError: false,\n        forgotPasswordRequest: false,\n        forgotPasswordError: false,\n        resetPasswordRequest: false,\n        resetPasswordError: false,\n    };\n\n    export const authReducer = (state = authInitialState, action: TAuthActions):TAuthState => {\n        switch (action.type) {\n            case REGISTER_REQUEST: {\n                return {\n                    ...state,\n                    registerRequest: true,\n                    registerError: false,\n                };\n            }\n                case REGISTER_SUCCESS: {\n                    return {\n                        ...state,\n                        user: action.user,\n                        registerRequest: false,\n                        loggedIn: true\n                    };\n                }\n                case REGISTER_ERROR: {\n                    return {\n                        ...state,\n                        registerError: true,\n                        registerRequest: false,\n                    };\n                }\n                case LOGIN_REQUEST: {\n                    return {\n                        ...state,\n                        loginRequest: true,\n                        loginError: false,\n                    };\n                }\n                case LOGIN_SUCCESS: {\n                    return {\n                        ...state,\n                        user: action.user,\n                        loginRequest: false,\n                        loggedIn: true\n                    };\n                }\n                case LOGIN_ERROR: {\n                    return {\n                        ...state,\n                        loginError: true,\n                        loginRequest: false,\n                    };\n                }\n                case UPDATE_TOKEN_REQUEST: {\n                    return {\n                        ...state,\n                        updateTokenRequest: true,\n                        updateTokenError: false,\n                    };\n                }\n                case UPDATE_TOKEN_SUCCESS: {\n                    return {\n                        ...state,\n                        loggedIn: true,\n                        updateTokenRequest: false,\n                    };\n                }\n                case UPDATE_TOKEN_ERROR: {\n                    return {\n                        ...state,\n                        updateTokenError: true,\n                        updateTokenRequest: false,\n                    };\n                }\n                case LOGOUT_REQUEST: {\n                    return {\n                        ...state,\n                        logoutRequest: true,\n                        logoutError: false,\n                    };\n                }\n                case LOGOUT_SUCCESS: {\n                    return {\n                        ...state,\n                        loggedIn: false,\n                        user: {\n                            name: '',\n                            email: ''\n                        },\n                    };\n                }\n                case LOGOUT_ERROR: {\n                    return {\n                        ...state,\n                        logoutError: true,\n                        logoutRequest: false,\n                    };\n                }\n                case USER_REQUEST: {\n                    return {\n                        ...state,\n                        userRequest: true,\n                        userError: false,\n                    };\n                }\n                case USER_SUCCESS: {\n                    return {\n                        ...state,\n                        user: action.user,\n                        loggedIn: true,\n                        userRequest: false,\n                    };\n                }\n                case USER_ERROR: {\n                    return {\n                        ...state,\n                        userError: true,\n                        userRequest: false,\n                        loggedIn: false\n                    };\n                }\n                case UPDATE_USER_REQUEST: {\n                    return {\n                        ...state,\n                        updateUserRequest: true,\n                        updateUserError: false,\n                    };\n                }\n                case UPDATE_USER_SUCCESS: {\n                    return {\n                        ...state,\n                        user: action.user,\n                        updateUserRequest: false,\n                    };\n                }\n                case UPDATE_USER_ERROR: {\n                    return {\n                        ...state,\n                        updateUserError: true,\n                        updateUserRequest: false,\n                    };\n                }\n                case FORGOT_PASSWORD_REQUEST: {\n                    return {\n                        ...state,\n                        forgotPasswordRequest: true,\n                        forgotPasswordError: false,\n                    };\n                }\n                case FORGOT_PASSWORD_SUCCESS: {\n                    return {\n                        ...state,\n                        forgotPasswordError: false,\n                        forgotPasswordRequest: false,\n                    };\n                }\n                case FORGOT_PASSWORD_ERROR: {\n                    return {\n                        ...state,\n                        forgotPasswordError: true,\n                        forgotPasswordRequest: false,\n                    };\n                }\n                case RESET_PASSWORD_REQUEST: {\n                    return {\n                        ...state,\n                        resetPasswordRequest: true,\n                        resetPasswordError: false,\n                    };\n                }\n                case RESET_PASSWORD_SUCCESS: {\n                    return {\n                        ...state,\n                        resetPasswordError: false,\n                        resetPasswordRequest: false,\n                    };\n                }\n                case RESET_PASSWORD_ERROR: {\n                    return {\n                        ...state,\n                        resetPasswordError: true,\n                        resetPasswordRequest: false,\n                    };\n                }                                \n            default:\n                return state;\n        }\n    }"]},"metadata":{},"sourceType":"module"}