{"ast":null,"code":"import { checkResponse } from '../utils.ts';\nimport { baseUrl } from '../../utils/api.ts';\nexport const SET_TAB = 'SET_TAB';\nexport const GET_INGREDIENTS = 'GET_INGREDIENTS';\nexport const GET_INGREDIENTS_REQUEST = 'GET_INGREDIENTS_REQUEST';\nexport const GET_INGREDIENTS_SUCCESS = 'GET_INGREDIENTS_SUCCESS';\nexport const GET_INGREDIENTS_ERROR = 'GET_INGREDIENTS_ERROR';\nexport const GET_CONSTRUCTOR = 'GET_CONSTRUCTOR';\nexport const OPEN_MODAL = 'OPEN_MODAL';\nexport const OPEN_MODAL_ORDER = 'OPEN_MODAL_ORDER';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\nexport const CLOSE_MODAL_ORDER = 'CLOSE_MODAL_ORDER';\nexport const GET_ORDER = 'GET_ORDER';\nexport const GET_ORDER_REQUEST = 'GET_ORDER_REQUEST';\nexport const GET_ORDER_SUCCESS = 'GET_ORDER_SUCCESS';\nexport const GET_ORDER_ERROR = 'GET_ORDER_ERROR';\nexport const SET_ORDER = 'SET_ORDER';\nexport const CLEAR_ORDER = 'CLEAR_ORDER';\nexport const ADD_INGREDIENT = 'ADD_INGREDIENT';\nexport const DELETE_INGREDIENT = 'DELETE_INGREDIENT';\nexport const CHANGE_SORT = 'CHANGE_SORT';\nexport const getOrderID = data => {\n  return dispatch => {\n    try {\n      dispatch({\n        type: GET_ORDER_REQUEST\n      });\n      fetch(baseUrl + \"orders\", {\n        method: 'POST',\n        mode: 'cors',\n        body: JSON.stringify({\n          \"ingredients\": data\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(checkResponse).then(obj => {\n        dispatch({\n          type: GET_ORDER_SUCCESS,\n          data: obj\n        });\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_ORDER_ERROR,\n        error: error\n      });\n    }\n  };\n};\nexport const getIngredientsData = () => {\n  return dispatch => {\n    try {\n      dispatch({\n        type: GET_INGREDIENTS_REQUEST\n      });\n      fetch(baseUrl + \"ingredients\").then(checkResponse).then(obj => {\n        dispatch({\n          type: GET_INGREDIENTS_SUCCESS,\n          data: obj.data\n        });\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_INGREDIENTS_ERROR,\n        error: error\n      });\n    }\n  };\n};\nexport const addIngredient = item => {\n  return {\n    type: ADD_INGREDIENT,\n    item\n  };\n};\nexport const deleteIngredient = id => {\n  return {\n    type: DELETE_INGREDIENT,\n    id\n  };\n};\nexport const changeSortIngredient = (drag, hover) => {\n  return {\n    type: CHANGE_SORT,\n    drag,\n    hover\n  };\n};\nexport const openModal = el => {\n  return {\n    type: OPEN_MODAL,\n    item: el\n  };\n};\nexport const closeModal = () => {\n  return {\n    type: CLOSE_MODAL\n  };\n};\nexport const setTab = e => {\n  return {\n    type: SET_TAB,\n    tab: e\n  };\n};\nexport const openModalOrder = () => {\n  return {\n    type: OPEN_MODAL_ORDER\n  };\n};\nexport const closeModalOrder = () => {\n  return {\n    type: CLOSE_MODAL_ORDER\n  };\n};\nexport const resetOrder = () => {\n  return {\n    type: CLEAR_ORDER\n  };\n};","map":{"version":3,"sources":["/Users/annaplokhotnyuk/Documents/react-burger/react-burger/src/services/actions/burger.js"],"names":["checkResponse","baseUrl","SET_TAB","GET_INGREDIENTS","GET_INGREDIENTS_REQUEST","GET_INGREDIENTS_SUCCESS","GET_INGREDIENTS_ERROR","GET_CONSTRUCTOR","OPEN_MODAL","OPEN_MODAL_ORDER","CLOSE_MODAL","CLOSE_MODAL_ORDER","GET_ORDER","GET_ORDER_REQUEST","GET_ORDER_SUCCESS","GET_ORDER_ERROR","SET_ORDER","CLEAR_ORDER","ADD_INGREDIENT","DELETE_INGREDIENT","CHANGE_SORT","getOrderID","data","dispatch","type","fetch","method","mode","body","JSON","stringify","headers","then","obj","error","getIngredientsData","addIngredient","item","deleteIngredient","id","changeSortIngredient","drag","hover","openModal","el","closeModal","setTab","e","tab","openModalOrder","closeModalOrder","resetOrder"],"mappings":"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","sourcesContent":["import {\n    checkResponse\n} from '../utils.ts';\nimport {\n    baseUrl\n} from '../../utils/api.ts';\nexport const SET_TAB = 'SET_TAB';\nexport const GET_INGREDIENTS = 'GET_INGREDIENTS';\nexport const GET_INGREDIENTS_REQUEST = 'GET_INGREDIENTS_REQUEST';\nexport const GET_INGREDIENTS_SUCCESS = 'GET_INGREDIENTS_SUCCESS';\nexport const GET_INGREDIENTS_ERROR = 'GET_INGREDIENTS_ERROR';\nexport const GET_CONSTRUCTOR = 'GET_CONSTRUCTOR';\nexport const OPEN_MODAL = 'OPEN_MODAL';\nexport const OPEN_MODAL_ORDER = 'OPEN_MODAL_ORDER';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\nexport const CLOSE_MODAL_ORDER = 'CLOSE_MODAL_ORDER';\nexport const GET_ORDER = 'GET_ORDER';\nexport const GET_ORDER_REQUEST = 'GET_ORDER_REQUEST';\nexport const GET_ORDER_SUCCESS = 'GET_ORDER_SUCCESS';\nexport const GET_ORDER_ERROR = 'GET_ORDER_ERROR';\nexport const SET_ORDER = 'SET_ORDER';\nexport const CLEAR_ORDER = 'CLEAR_ORDER';\nexport const ADD_INGREDIENT = 'ADD_INGREDIENT';\nexport const DELETE_INGREDIENT = 'DELETE_INGREDIENT';\nexport const CHANGE_SORT = 'CHANGE_SORT';\n\nexport const getOrderID = (data) => {\n\n    return (dispatch) => {\n        try {\n            dispatch({\n                type: GET_ORDER_REQUEST\n            });\n\n            fetch(baseUrl + \"orders\", {\n                    method: 'POST',\n                    mode: 'cors',\n                    body: JSON.stringify({\n                        \"ingredients\": data\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                .then(checkResponse)\n                .then(obj => {\n                    dispatch({\n                        type: GET_ORDER_SUCCESS,\n                        data: obj\n                    });\n                });\n        } catch (error) {\n            dispatch({\n                type: GET_ORDER_ERROR,\n                error: error\n            });\n        }\n    }\n};\n\nexport const getIngredientsData = () => {\n    return (dispatch) => {\n        try {\n            dispatch({\n                type: GET_INGREDIENTS_REQUEST\n            });\n\n            fetch(baseUrl + \"ingredients\")\n                .then(checkResponse)\n                .then(obj => {\n                    dispatch({\n                        type: GET_INGREDIENTS_SUCCESS,\n                        data: obj.data\n                    });\n                });\n        } catch (error) {\n            dispatch({\n                type: GET_INGREDIENTS_ERROR,\n                error: error\n            });\n        }\n    }\n};\n\nexport const addIngredient = (item) => {\n    return {\n        type: ADD_INGREDIENT,\n        item\n    }\n}\n\nexport const deleteIngredient = (id) => {\n    return {\n        type: DELETE_INGREDIENT,\n        id\n    }\n}\n\nexport const changeSortIngredient = (drag, hover) => {\n    return {\n        type: CHANGE_SORT,\n        drag,\n        hover\n    }\n}\n\nexport const openModal = (el) => {\n    return {\n        type: OPEN_MODAL, \n        item: el \n    }\n}\n\nexport const closeModal = () => {\n    return {\n        type: CLOSE_MODAL, \n    }\n}\n\nexport const setTab = (e) => {\n    return {\n        type: SET_TAB, \n        tab: e\n    }\n}\n\nexport const openModalOrder = () => {\n    return {\n        type: OPEN_MODAL_ORDER\n    }\n}\n\nexport const closeModalOrder = () => {\n    return {\n        type: CLOSE_MODAL_ORDER, \n    }\n}\n\nexport const resetOrder = () => {\n    return {\n        type: CLEAR_ORDER, \n    }\n}"]},"metadata":{},"sourceType":"module"}