{"ast":null,"code":"import { getCookie } from \"../utils\";\nexport const socketMiddleware = (wsUrl, wsActions) => {\n  return store => {\n    let socket = null;\n    return next => action => {\n      var _getCookie;\n\n      const {\n        dispatch\n      } = store;\n      const {\n        type,\n        withToken,\n        payload\n      } = action;\n      const {\n        wsInit,\n        onOpen,\n        onClose,\n        onError,\n        onGetOrders\n      } = wsActions;\n      const accessCookie = (_getCookie = getCookie('token')) === null || _getCookie === void 0 ? void 0 : _getCookie.split(' ')[1];\n      const token = withToken ? accessCookie : '';\n\n      if (type === wsInit) {\n        socket = new WebSocket(withToken ? `${wsUrl}?token=${token}` : `${wsUrl}${payload}`);\n      }\n\n      if (socket) {\n        socket.send = event => {\n          dispatch({\n            type: onOpen,\n            orders: event\n          });\n        };\n\n        socket.onerror = event => {\n          dispatch({\n            type: onError,\n            orders: event\n          });\n        };\n\n        socket.onmessage = event => {\n          const {\n            data\n          } = event;\n          const parsed = JSON.parse(data);\n          dispatch({\n            type: onGetOrders,\n            orders: parsed\n          });\n        };\n\n        socket.onclose = event => {\n          dispatch({\n            type: onClose,\n            orders: event\n          });\n        };\n      }\n\n      next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/annaplokhotnyuk/Documents/react-burger/src/services/middleware/socketMiddleware.ts"],"names":["getCookie","socketMiddleware","wsUrl","wsActions","store","socket","next","action","dispatch","type","withToken","payload","wsInit","onOpen","onClose","onError","onGetOrders","accessCookie","split","token","WebSocket","send","event","orders","onerror","onmessage","data","parsed","JSON","parse","onclose"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AAKA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAgBC,SAAhB,KAAoE;AAClG,SAAQC,KAAD,IAAkD;AACvD,QAAIC,MAAwB,GAAG,IAA/B;AAEA,WAAOC,IAAI,IAAKC,MAAD,IAAY;AAAA;;AACzB,YAAM;AAAEC,QAAAA;AAAF,UAAeJ,KAArB;AACA,YAAM;AAAEK,QAAAA,IAAF;AAAQC,QAAAA,SAAR;AAAmBC,QAAAA;AAAnB,UAA+BJ,MAArC;AACA,YAAM;AAAEK,QAAAA,MAAF;AAAUC,QAAAA,MAAV;AAAkBC,QAAAA,OAAlB;AAA2BC,QAAAA,OAA3B;AAAoCC,QAAAA;AAApC,UAAoDb,SAA1D;AACA,YAAMc,YAAY,iBAAGjB,SAAS,CAAC,OAAD,CAAZ,+CAAG,WAAoBkB,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,CAArB;AACA,YAAMC,KAAK,GAAGT,SAAS,GAAGO,YAAH,GAAkB,EAAzC;;AAEA,UAAIR,IAAI,KAAKG,MAAb,EAAqB;AACnBP,QAAAA,MAAM,GAAG,IAAIe,SAAJ,CAAcV,SAAS,GAAI,GAAER,KAAM,UAASiB,KAAM,EAA3B,GAAgC,GAAEjB,KAAM,GAAES,OAAQ,EAAzE,CAAT;AACD;;AAED,UAAIN,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACgB,IAAP,GAAcC,KAAK,IAAI;AACrBd,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAEI,MAAR;AAAgBU,YAAAA,MAAM,EAAED;AAAxB,WAAD,CAAR;AACD,SAFD;;AAGAjB,QAAAA,MAAM,CAACmB,OAAP,GAAiBF,KAAK,IAAI;AACxBd,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAEM,OAAR;AAAiBQ,YAAAA,MAAM,EAAED;AAAzB,WAAD,CAAR;AACD,SAFD;;AAGAjB,QAAAA,MAAM,CAACoB,SAAP,GAAmBH,KAAK,IAAI;AAC1B,gBAAM;AAAEI,YAAAA;AAAF,cAAWJ,KAAjB;AACA,gBAAMK,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAf;AACAlB,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAEO,WAAR;AAAqBO,YAAAA,MAAM,EAAEI;AAA7B,WAAD,CAAR;AACD,SAJD;;AAKAtB,QAAAA,MAAM,CAACyB,OAAP,GAAiBR,KAAK,IAAI;AACxBd,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAEK,OAAR;AAAiBS,YAAAA,MAAM,EAAED;AAAzB,WAAD,CAAR;AACD,SAFD;AAGD;;AACDhB,MAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,KA5BD;AA6BD,GAhCD;AAiCD,CAlCM","sourcesContent":["import { getCookie } from \"../utils\";\nimport { wsActions as wsActionTypes } from '../actions/feed';\nimport { Middleware, MiddlewareAPI } from \"redux\";\nimport { AppDispatch, RootState } from \"../utils\";\n\nexport const socketMiddleware = (wsUrl: string, wsActions: typeof wsActionTypes): Middleware<{}> => {\n  return (store: MiddlewareAPI<AppDispatch, RootState>) => {\n    let socket: WebSocket | null = null;\n\n    return next => (action) => {\n      const { dispatch } = store;\n      const { type, withToken, payload } = action;\n      const { wsInit, onOpen, onClose, onError, onGetOrders } = wsActions;\n      const accessCookie = getCookie('token')?.split(' ')[1];\n      const token = withToken ? accessCookie : '';\n\n      if (type === wsInit) {\n        socket = new WebSocket(withToken ? `${wsUrl}?token=${token}` : `${wsUrl}${payload}`);\n      }\n\n      if (socket) {\n        socket.send = event => {\n          dispatch({ type: onOpen, orders: event });\n        };\n        socket.onerror = event => {\n          dispatch({ type: onError, orders: event });\n        };\n        socket.onmessage = event => {\n          const { data } = event;\n          const parsed = JSON.parse(data);\n          dispatch({ type: onGetOrders, orders: parsed });\n        };\n        socket.onclose = event => {\n          dispatch({ type: onClose, orders: event });\n        };\n      }\n      next(action);\n    };\n  }\n}; "]},"metadata":{},"sourceType":"module"}