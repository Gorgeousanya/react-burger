{"ast":null,"code":"import{checkResponse,getCookie}from'../utils';import{baseUrl}from'../../utils/api';export var SET_TAB='SET_TAB';export var GET_INGREDIENTS='GET_INGREDIENTS';export var GET_INGREDIENTS_REQUEST='GET_INGREDIENTS_REQUEST';export var GET_INGREDIENTS_SUCCESS='GET_INGREDIENTS_SUCCESS';export var GET_INGREDIENTS_ERROR='GET_INGREDIENTS_ERROR';export var GET_CONSTRUCTOR='GET_CONSTRUCTOR';export var OPEN_MODAL='OPEN_MODAL';export var OPEN_MODAL_ORDER='OPEN_MODAL_ORDER';export var CLOSE_MODAL='CLOSE_MODAL';export var CLOSE_MODAL_ORDER='CLOSE_MODAL_ORDER';export var GET_ORDER='GET_ORDER';export var GET_ORDER_REQUEST='GET_ORDER_REQUEST';export var GET_ORDER_SUCCESS='GET_ORDER_SUCCESS';export var GET_ORDER_ERROR='GET_ORDER_ERROR';export var RESET_ORDER='RESET_ORDER';export var ADD_INGREDIENT='ADD_INGREDIENT';export var DELETE_INGREDIENT='DELETE_INGREDIENT';export var CHANGE_SORT='CHANGE_SORT';var getOrderRequestAction=function getOrderRequestAction(){return{type:GET_ORDER_REQUEST};};var getOrderSuccessAction=function getOrderSuccessAction(data){return{type:GET_ORDER_SUCCESS,data:data};};var getOrderErrorAction=function getOrderErrorAction(){return{type:GET_ORDER_REQUEST};};var getIngredientsRequestAction=function getIngredientsRequestAction(){return{type:GET_INGREDIENTS_REQUEST};};var getIngredientsSuccessAction=function getIngredientsSuccessAction(data){return{type:GET_INGREDIENTS_SUCCESS,data:data};};var getIngredientsErrorAction=function getIngredientsErrorAction(){return{type:GET_INGREDIENTS_REQUEST};};export var getOrderID=function getOrderID(data){return function(dispatch){try{dispatch(getOrderRequestAction());fetch(baseUrl+\"orders\",{method:'POST',mode:'cors',body:JSON.stringify({\"ingredients\":data}),headers:{'Content-Type':'application/json','Authorization':\"\".concat(getCookie('token'))}}).then(checkResponse).then(function(obj){dispatch(getOrderSuccessAction(obj));});}catch(error){console.log(error);dispatch(getOrderErrorAction());}};};export var getIngredientsData=function getIngredientsData(){return function(dispatch){try{dispatch(getIngredientsRequestAction());fetch(baseUrl+\"ingredients\").then(checkResponse).then(function(obj){dispatch(getIngredientsSuccessAction(obj.data));});}catch(error){console.log(error);dispatch(getIngredientsErrorAction());}};};export var addIngredient=function addIngredient(item){return{type:ADD_INGREDIENT,item:item};};export var deleteIngredient=function deleteIngredient(id){return{type:DELETE_INGREDIENT,id:id};};export var changeSortIngredient=function changeSortIngredient(drag,hover){return{type:CHANGE_SORT,drag:drag,hover:hover};};export var openModal=function openModal(el){return{type:OPEN_MODAL,item:el};};export var closeModal=function closeModal(){return{type:CLOSE_MODAL};};export var setTab=function setTab(e){return{type:SET_TAB,tab:e};};export var openModalOrder=function openModalOrder(){return{type:OPEN_MODAL_ORDER};};export var closeModalOrder=function closeModalOrder(){return{type:CLOSE_MODAL_ORDER};};export var resetOrder=function resetOrder(){return{type:RESET_ORDER};};","map":{"version":3,"sources":["/Users/annaplokhotnyuk/Documents/react-burger/src/services/actions/burger.ts"],"names":["checkResponse","getCookie","baseUrl","SET_TAB","GET_INGREDIENTS","GET_INGREDIENTS_REQUEST","GET_INGREDIENTS_SUCCESS","GET_INGREDIENTS_ERROR","GET_CONSTRUCTOR","OPEN_MODAL","OPEN_MODAL_ORDER","CLOSE_MODAL","CLOSE_MODAL_ORDER","GET_ORDER","GET_ORDER_REQUEST","GET_ORDER_SUCCESS","GET_ORDER_ERROR","RESET_ORDER","ADD_INGREDIENT","DELETE_INGREDIENT","CHANGE_SORT","getOrderRequestAction","type","getOrderSuccessAction","data","getOrderErrorAction","getIngredientsRequestAction","getIngredientsSuccessAction","getIngredientsErrorAction","getOrderID","dispatch","fetch","method","mode","body","JSON","stringify","headers","then","obj","error","console","log","getIngredientsData","addIngredient","item","deleteIngredient","id","changeSortIngredient","drag","hover","openModal","el","closeModal","setTab","e","tab","openModalOrder","closeModalOrder","resetOrder"],"mappings":"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","sourcesContent":["import {\n    checkResponse,\n    AppDispatch,\n    AppThunk,\n    getCookie,\n} from '../utils';\nimport {\n    baseUrl\n} from '../../utils/api';\nimport {\n    TIngredient,\n    IOrderState\n} from '../../utils/types'\n\nexport const SET_TAB: 'SET_TAB' = 'SET_TAB';\nexport const GET_INGREDIENTS: 'GET_INGREDIENTS' = 'GET_INGREDIENTS';\nexport const GET_INGREDIENTS_REQUEST: 'GET_INGREDIENTS_REQUEST' = 'GET_INGREDIENTS_REQUEST';\nexport const GET_INGREDIENTS_SUCCESS: 'GET_INGREDIENTS_SUCCESS' = 'GET_INGREDIENTS_SUCCESS';\nexport const GET_INGREDIENTS_ERROR: 'GET_INGREDIENTS_ERROR' = 'GET_INGREDIENTS_ERROR';\nexport const GET_CONSTRUCTOR: 'GET_CONSTRUCTOR' = 'GET_CONSTRUCTOR';\nexport const OPEN_MODAL: 'OPEN_MODAL' = 'OPEN_MODAL';\nexport const OPEN_MODAL_ORDER: 'OPEN_MODAL_ORDER' = 'OPEN_MODAL_ORDER';\nexport const CLOSE_MODAL: 'CLOSE_MODAL' = 'CLOSE_MODAL';\nexport const CLOSE_MODAL_ORDER: 'CLOSE_MODAL_ORDER' = 'CLOSE_MODAL_ORDER';\nexport const GET_ORDER: 'GET_ORDER' = 'GET_ORDER';\nexport const GET_ORDER_REQUEST: 'GET_ORDER_REQUEST' = 'GET_ORDER_REQUEST';\nexport const GET_ORDER_SUCCESS: 'GET_ORDER_SUCCESS' = 'GET_ORDER_SUCCESS';\nexport const GET_ORDER_ERROR: 'GET_ORDER_ERROR' = 'GET_ORDER_ERROR';\nexport const RESET_ORDER: 'RESET_ORDER' = 'RESET_ORDER';\nexport const ADD_INGREDIENT: 'ADD_INGREDIENT' = 'ADD_INGREDIENT';\nexport const DELETE_INGREDIENT: 'DELETE_INGREDIENT' = 'DELETE_INGREDIENT';\nexport const CHANGE_SORT: 'CHANGE_SORT' = 'CHANGE_SORT';\n\nexport interface IGetOrderRequestAction {\n    readonly type: typeof GET_ORDER_REQUEST;\n}\n\nexport interface IGetOrderSuccessAction {\n    readonly type: typeof GET_ORDER_SUCCESS;\n    readonly data: IOrderState;\n}\n\nexport interface IGetOrderErrorAction {\n    readonly type: typeof GET_ORDER_ERROR;\n}\n\nexport interface IGetIngredientsRequestAction {\n    readonly type: typeof GET_INGREDIENTS_REQUEST;\n}\n\nexport interface IGetIngredientsSuccessAction {\n    readonly type: typeof GET_INGREDIENTS_SUCCESS;\n    readonly data: Array<TIngredient>;\n}\n\nexport interface IGetIngredientsErrorAction {\n    readonly type: typeof GET_INGREDIENTS_ERROR;\n}\n\nexport interface IAddIngredientAction {\n    readonly type: typeof ADD_INGREDIENT;\n    readonly item: TIngredient;\n}\n\nexport interface IDeleteIngredientAction {\n    readonly type: typeof DELETE_INGREDIENT;\n    readonly id: string;\n}\n\nexport interface ISetTab {\n    readonly type: typeof SET_TAB;\n    readonly tab: string\n}\n\nexport interface IChangeSortAction {\n    readonly type: typeof CHANGE_SORT;\n    readonly drag: number;\n    readonly hover: number;\n}\n\nexport interface IOpenModalAction {\n    readonly type: typeof OPEN_MODAL;\n    readonly item: TIngredient;\n}\n\nexport interface ICloseModalAction {\n    readonly type: typeof CLOSE_MODAL;\n}\n\nexport interface IOpenModalOrderAction {\n    readonly type: typeof OPEN_MODAL_ORDER;\n}\n\nexport interface ICloseModalOrderAction {\n    readonly type: typeof CLOSE_MODAL_ORDER;\n}\n\nexport interface IResetOrderlAction {\n    readonly type: typeof RESET_ORDER;\n}\n\nconst getOrderRequestAction = (): IGetOrderRequestAction => ({\n    type: GET_ORDER_REQUEST\n})\nconst getOrderSuccessAction = (data: any): IGetOrderSuccessAction => ({\n                        type: GET_ORDER_SUCCESS,\n                        data\n                    })\n\nconst getOrderErrorAction = (): IGetOrderRequestAction => ({\n    type: GET_ORDER_REQUEST\n})\n\nconst getIngredientsRequestAction = (): IGetIngredientsRequestAction => ({\n    type: GET_INGREDIENTS_REQUEST\n})\nconst getIngredientsSuccessAction = (data: any): IGetIngredientsSuccessAction => ({\n                        type: GET_INGREDIENTS_SUCCESS,\n                        data\n                    })\nconst getIngredientsErrorAction = (): IGetIngredientsRequestAction => ({\n    type: GET_INGREDIENTS_REQUEST\n})\n\nexport const getOrderID: AppThunk = (data: TIngredient) => {\n\n    return (dispatch: AppDispatch) => {\n        try {\n            dispatch(getOrderRequestAction());\n\n            fetch(baseUrl + \"orders\", {\n                method: 'POST',\n                mode: 'cors',\n                body: JSON.stringify({\n                    \"ingredients\": data\n                }),\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `${getCookie('token')}`\n                }\n            })\n                .then(checkResponse)\n                .then(obj => {\n                    dispatch(getOrderSuccessAction(obj));\n                });\n        } catch (error) {\n            console.log(error)\n            dispatch(getOrderErrorAction());\n        }\n    }\n};\n\nexport const getIngredientsData: AppThunk = () => {\n    return (dispatch: AppDispatch) => {\n        try {\n            dispatch(getIngredientsRequestAction());\n\n            fetch(baseUrl + \"ingredients\")\n                .then(checkResponse)\n                .then(obj => {\n                    dispatch(getIngredientsSuccessAction(obj.data));\n                });\n        } catch (error) {\n            console.log(error)\n            dispatch(getIngredientsErrorAction());\n        }\n    }\n};\n\nexport const addIngredient = (item: TIngredient): IAddIngredientAction => {\n    return {\n        type: ADD_INGREDIENT,\n        item\n    }\n}\n\nexport const deleteIngredient = (id: string): IDeleteIngredientAction => {\n    return {\n        type: DELETE_INGREDIENT,\n        id\n    }\n}\n\nexport const changeSortIngredient = (drag: number, hover: number): IChangeSortAction => {\n    return {\n        type: CHANGE_SORT,\n        drag,\n        hover\n    }\n}\n\nexport const openModal = (el: TIngredient): IOpenModalAction => {\n    return {\n        type: OPEN_MODAL,\n        item: el\n    }\n}\n\nexport const closeModal = (): ICloseModalAction => {\n    return {\n        type: CLOSE_MODAL,\n    }\n}\n\nexport const setTab = (e: string): ISetTab => {\n    return {\n        type: SET_TAB,\n        tab: e\n    }\n}\n\nexport const openModalOrder = (): IOpenModalOrderAction => {\n    return {\n        type: OPEN_MODAL_ORDER\n    }\n}\n\nexport const closeModalOrder = (): ICloseModalOrderAction => {\n    return {\n        type: CLOSE_MODAL_ORDER,\n    }\n}\n\nexport const resetOrder = (): IResetOrderlAction => {\n    return {\n        type: RESET_ORDER,\n    }\n}\n\nexport type TBurgerActions = | IGetOrderRequestAction\n    | IGetOrderSuccessAction\n    | IGetOrderErrorAction\n    | IGetIngredientsRequestAction\n    | IGetIngredientsSuccessAction\n    | IGetIngredientsErrorAction\n    | IAddIngredientAction\n    | IDeleteIngredientAction\n    | ISetTab\n    | IChangeSortAction\n    | IOpenModalAction\n    | ICloseModalAction\n    | IOpenModalOrderAction\n    | ICloseModalOrderAction\n    | IResetOrderlAction;"]},"metadata":{},"sourceType":"module"}