{"ast":null,"code":"import { checkResponse, getCookie } from '../utils';\nimport { baseUrl } from '../../utils/api';\nexport const SET_TAB = 'SET_TAB';\nexport const GET_INGREDIENTS = 'GET_INGREDIENTS';\nexport const GET_INGREDIENTS_REQUEST = 'GET_INGREDIENTS_REQUEST';\nexport const GET_INGREDIENTS_SUCCESS = 'GET_INGREDIENTS_SUCCESS';\nexport const GET_INGREDIENTS_ERROR = 'GET_INGREDIENTS_ERROR';\nexport const GET_CONSTRUCTOR = 'GET_CONSTRUCTOR';\nexport const OPEN_MODAL = 'OPEN_MODAL';\nexport const OPEN_MODAL_ORDER = 'OPEN_MODAL_ORDER';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\nexport const CLOSE_MODAL_ORDER = 'CLOSE_MODAL_ORDER';\nexport const GET_ORDER = 'GET_ORDER';\nexport const GET_ORDER_REQUEST = 'GET_ORDER_REQUEST';\nexport const GET_ORDER_SUCCESS = 'GET_ORDER_SUCCESS';\nexport const GET_ORDER_ERROR = 'GET_ORDER_ERROR';\nexport const RESET_ORDER = 'RESET_ORDER';\nexport const ADD_INGREDIENT = 'ADD_INGREDIENT';\nexport const DELETE_INGREDIENT = 'DELETE_INGREDIENT';\nexport const CHANGE_SORT = 'CHANGE_SORT';\n\nconst getOrderRequestAction = () => ({\n  type: GET_ORDER_REQUEST\n});\n\nconst getOrderSuccessAction = data => ({\n  type: GET_ORDER_SUCCESS,\n  data\n});\n\nconst getOrderErrorAction = () => ({\n  type: GET_ORDER_REQUEST\n});\n\nconst getIngredientsRequestAction = () => ({\n  type: GET_INGREDIENTS_REQUEST\n});\n\nconst getIngredientsSuccessAction = data => ({\n  type: GET_INGREDIENTS_SUCCESS,\n  data\n});\n\nconst getIngredientsErrorAction = () => ({\n  type: GET_INGREDIENTS_REQUEST\n});\n\nexport const getOrderID = data => {\n  return dispatch => {\n    try {\n      dispatch(getOrderRequestAction());\n      fetch(baseUrl + \"orders\", {\n        method: 'POST',\n        mode: 'cors',\n        body: JSON.stringify({\n          \"ingredients\": data\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `${getCookie('token')}`\n        }\n      }).then(checkResponse).then(obj => {\n        dispatch(getOrderSuccessAction(obj));\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch(getOrderErrorAction());\n    }\n  };\n};\nexport const getIngredientsData = () => {\n  return dispatch => {\n    try {\n      dispatch(getIngredientsRequestAction());\n      fetch(baseUrl + \"ingredients\").then(checkResponse).then(obj => {\n        dispatch(getIngredientsSuccessAction(obj.data));\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch(getIngredientsErrorAction());\n    }\n  };\n};\nexport const addIngredient = item => {\n  return {\n    type: ADD_INGREDIENT,\n    item\n  };\n};\nexport const deleteIngredient = id => {\n  return {\n    type: DELETE_INGREDIENT,\n    id\n  };\n};\nexport const changeSortIngredient = (drag, hover) => {\n  return {\n    type: CHANGE_SORT,\n    drag,\n    hover\n  };\n};\nexport const openModal = el => {\n  return {\n    type: OPEN_MODAL,\n    item: el\n  };\n};\nexport const closeModal = () => {\n  return {\n    type: CLOSE_MODAL\n  };\n};\nexport const setTab = e => {\n  return {\n    type: SET_TAB,\n    tab: e\n  };\n};\nexport const openModalOrder = () => {\n  return {\n    type: OPEN_MODAL_ORDER\n  };\n};\nexport const closeModalOrder = () => {\n  return {\n    type: CLOSE_MODAL_ORDER\n  };\n};\nexport const resetOrder = () => {\n  return {\n    type: RESET_ORDER\n  };\n};","map":{"version":3,"sources":["/Users/annaplokhotnyuk/Documents/react-burger/src/services/actions/burger.ts"],"names":["checkResponse","getCookie","baseUrl","SET_TAB","GET_INGREDIENTS","GET_INGREDIENTS_REQUEST","GET_INGREDIENTS_SUCCESS","GET_INGREDIENTS_ERROR","GET_CONSTRUCTOR","OPEN_MODAL","OPEN_MODAL_ORDER","CLOSE_MODAL","CLOSE_MODAL_ORDER","GET_ORDER","GET_ORDER_REQUEST","GET_ORDER_SUCCESS","GET_ORDER_ERROR","RESET_ORDER","ADD_INGREDIENT","DELETE_INGREDIENT","CHANGE_SORT","getOrderRequestAction","type","getOrderSuccessAction","data","getOrderErrorAction","getIngredientsRequestAction","getIngredientsSuccessAction","getIngredientsErrorAction","getOrderID","dispatch","fetch","method","mode","body","JSON","stringify","headers","then","obj","error","console","log","getIngredientsData","addIngredient","item","deleteIngredient","id","changeSortIngredient","drag","hover","openModal","el","closeModal","setTab","e","tab","openModalOrder","closeModalOrder","resetOrder"],"mappings":"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","sourcesContent":["import {\n    checkResponse,\n    AppDispatch,\n    AppThunk,\n    getCookie,\n} from '../utils';\nimport {\n    baseUrl\n} from '../../utils/api';\nimport {\n    TIngredient,\n    IOrderState\n} from '../../utils/types'\n\nexport const SET_TAB: 'SET_TAB' = 'SET_TAB';\nexport const GET_INGREDIENTS: 'GET_INGREDIENTS' = 'GET_INGREDIENTS';\nexport const GET_INGREDIENTS_REQUEST: 'GET_INGREDIENTS_REQUEST' = 'GET_INGREDIENTS_REQUEST';\nexport const GET_INGREDIENTS_SUCCESS: 'GET_INGREDIENTS_SUCCESS' = 'GET_INGREDIENTS_SUCCESS';\nexport const GET_INGREDIENTS_ERROR: 'GET_INGREDIENTS_ERROR' = 'GET_INGREDIENTS_ERROR';\nexport const GET_CONSTRUCTOR: 'GET_CONSTRUCTOR' = 'GET_CONSTRUCTOR';\nexport const OPEN_MODAL: 'OPEN_MODAL' = 'OPEN_MODAL';\nexport const OPEN_MODAL_ORDER: 'OPEN_MODAL_ORDER' = 'OPEN_MODAL_ORDER';\nexport const CLOSE_MODAL: 'CLOSE_MODAL' = 'CLOSE_MODAL';\nexport const CLOSE_MODAL_ORDER: 'CLOSE_MODAL_ORDER' = 'CLOSE_MODAL_ORDER';\nexport const GET_ORDER: 'GET_ORDER' = 'GET_ORDER';\nexport const GET_ORDER_REQUEST: 'GET_ORDER_REQUEST' = 'GET_ORDER_REQUEST';\nexport const GET_ORDER_SUCCESS: 'GET_ORDER_SUCCESS' = 'GET_ORDER_SUCCESS';\nexport const GET_ORDER_ERROR: 'GET_ORDER_ERROR' = 'GET_ORDER_ERROR';\nexport const RESET_ORDER: 'RESET_ORDER' = 'RESET_ORDER';\nexport const ADD_INGREDIENT: 'ADD_INGREDIENT' = 'ADD_INGREDIENT';\nexport const DELETE_INGREDIENT: 'DELETE_INGREDIENT' = 'DELETE_INGREDIENT';\nexport const CHANGE_SORT: 'CHANGE_SORT' = 'CHANGE_SORT';\n\nexport interface IGetOrderRequestAction {\n    readonly type: typeof GET_ORDER_REQUEST;\n}\n\nexport interface IGetOrderSuccessAction {\n    readonly type: typeof GET_ORDER_SUCCESS;\n    readonly data: IOrderState;\n}\n\nexport interface IGetOrderErrorAction {\n    readonly type: typeof GET_ORDER_ERROR;\n}\n\nexport interface IGetIngredientsRequestAction {\n    readonly type: typeof GET_INGREDIENTS_REQUEST;\n}\n\nexport interface IGetIngredientsSuccessAction {\n    readonly type: typeof GET_INGREDIENTS_SUCCESS;\n    readonly data: Array<TIngredient>;\n}\n\nexport interface IGetIngredientsErrorAction {\n    readonly type: typeof GET_INGREDIENTS_ERROR;\n}\n\nexport interface IAddIngredientAction {\n    readonly type: typeof ADD_INGREDIENT;\n    readonly item: TIngredient;\n}\n\nexport interface IDeleteIngredientAction {\n    readonly type: typeof DELETE_INGREDIENT;\n    readonly id: string;\n}\n\nexport interface ISetTab {\n    readonly type: typeof SET_TAB;\n    readonly tab: string\n}\n\nexport interface IChangeSortAction {\n    readonly type: typeof CHANGE_SORT;\n    readonly drag: number;\n    readonly hover: number;\n}\n\nexport interface IOpenModalAction {\n    readonly type: typeof OPEN_MODAL;\n    readonly item: TIngredient;\n}\n\nexport interface ICloseModalAction {\n    readonly type: typeof CLOSE_MODAL;\n}\n\nexport interface IOpenModalOrderAction {\n    readonly type: typeof OPEN_MODAL_ORDER;\n}\n\nexport interface ICloseModalOrderAction {\n    readonly type: typeof CLOSE_MODAL_ORDER;\n}\n\nexport interface IResetOrderlAction {\n    readonly type: typeof RESET_ORDER;\n}\n\nconst getOrderRequestAction = (): IGetOrderRequestAction => ({\n    type: GET_ORDER_REQUEST\n})\nconst getOrderSuccessAction = (data: any): IGetOrderSuccessAction => ({\n                        type: GET_ORDER_SUCCESS,\n                        data\n                    })\n\nconst getOrderErrorAction = (): IGetOrderRequestAction => ({\n    type: GET_ORDER_REQUEST\n})\n\nconst getIngredientsRequestAction = (): IGetIngredientsRequestAction => ({\n    type: GET_INGREDIENTS_REQUEST\n})\nconst getIngredientsSuccessAction = (data: any): IGetIngredientsSuccessAction => ({\n                        type: GET_INGREDIENTS_SUCCESS,\n                        data\n                    })\nconst getIngredientsErrorAction = (): IGetIngredientsRequestAction => ({\n    type: GET_INGREDIENTS_REQUEST\n})\n\nexport const getOrderID: AppThunk = (data: TIngredient) => {\n\n    return (dispatch: AppDispatch) => {\n        try {\n            dispatch(getOrderRequestAction());\n\n            fetch(baseUrl + \"orders\", {\n                method: 'POST',\n                mode: 'cors',\n                body: JSON.stringify({\n                    \"ingredients\": data\n                }),\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `${getCookie('token')}`\n                }\n            })\n                .then(checkResponse)\n                .then(obj => {\n                    dispatch(getOrderSuccessAction(obj));\n                });\n        } catch (error) {\n            console.log(error)\n            dispatch(getOrderErrorAction());\n        }\n    }\n};\n\nexport const getIngredientsData: AppThunk = () => {\n    return (dispatch: AppDispatch) => {\n        try {\n            dispatch(getIngredientsRequestAction());\n\n            fetch(baseUrl + \"ingredients\")\n                .then(checkResponse)\n                .then(obj => {\n                    dispatch(getIngredientsSuccessAction(obj.data));\n                });\n        } catch (error) {\n            console.log(error)\n            dispatch(getIngredientsErrorAction());\n        }\n    }\n};\n\nexport const addIngredient = (item: TIngredient): IAddIngredientAction => {\n    return {\n        type: ADD_INGREDIENT,\n        item\n    }\n}\n\nexport const deleteIngredient = (id: string): IDeleteIngredientAction => {\n    return {\n        type: DELETE_INGREDIENT,\n        id\n    }\n}\n\nexport const changeSortIngredient = (drag: number, hover: number): IChangeSortAction => {\n    return {\n        type: CHANGE_SORT,\n        drag,\n        hover\n    }\n}\n\nexport const openModal = (el: TIngredient): IOpenModalAction => {\n    return {\n        type: OPEN_MODAL,\n        item: el\n    }\n}\n\nexport const closeModal = (): ICloseModalAction => {\n    return {\n        type: CLOSE_MODAL,\n    }\n}\n\nexport const setTab = (e: string): ISetTab => {\n    return {\n        type: SET_TAB,\n        tab: e\n    }\n}\n\nexport const openModalOrder = (): IOpenModalOrderAction => {\n    return {\n        type: OPEN_MODAL_ORDER\n    }\n}\n\nexport const closeModalOrder = (): ICloseModalOrderAction => {\n    return {\n        type: CLOSE_MODAL_ORDER,\n    }\n}\n\nexport const resetOrder = (): IResetOrderlAction => {\n    return {\n        type: RESET_ORDER,\n    }\n}\n\nexport type TBurgerActions = | IGetOrderRequestAction\n    | IGetOrderSuccessAction\n    | IGetOrderErrorAction\n    | IGetIngredientsRequestAction\n    | IGetIngredientsSuccessAction\n    | IGetIngredientsErrorAction\n    | IAddIngredientAction\n    | IDeleteIngredientAction\n    | ISetTab\n    | IChangeSortAction\n    | IOpenModalAction\n    | ICloseModalAction\n    | IOpenModalOrderAction\n    | ICloseModalOrderAction\n    | IResetOrderlAction;"]},"metadata":{},"sourceType":"module"}