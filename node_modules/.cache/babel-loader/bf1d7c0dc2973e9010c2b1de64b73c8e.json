{"ast":null,"code":"import { setCookie, deleteCookie, getCookie, checkResponse } from '../utils.ts';\nimport { baseUrl } from '../../utils/api.ts';\nexport const REGISTER_REQUEST = \"REGISTER_REQUEST\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAILED = \"REGISTER_FAILED\";\nexport const LOGIN_REQUEST = \"REGISTER_REQUEST\";\nexport const LOGIN_SUCCESS = \"REGISTER_SUCCESS\";\nexport const LOGIN_FAILED = \"REGISTER_FAILED\";\nexport const UPDATE_TOKEN_REQUEST = \"UPDATE_TOKEN_REQUEST\";\nexport const UPDATE_TOKEN_SUCCESS = \"UPDATE_TOKEN_SUCCESS\";\nexport const UPDATE_TOKEN_FAILED = \"UPDATE_TOKEN_FAILED\";\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILED = \"LOGOUT_FAILED\";\nexport const USER_REQUEST = \"USER_REQUEST\";\nexport const USER_SUCCESS = \"USER_SUCCESS\";\nexport const USER_FAILED = \"USER_FAILED\";\nexport const UPDATE_USER_REQUEST = \"UPDATE_USER_REQUEST\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILED = \"UPDATE_USER_FAILED\";\nexport const FORGOT_PASSWORD_REQUEST = \"FORGOT_PASSWORD_REQUEST\";\nexport const FORGOT_PASSWORD_SUCCESS = \"FORGOT_PASSWORD_SUCCESS\";\nexport const FORGOT_PASSWORD_FAILED = \"FORGOT_PASSWORD_FAILED\";\nexport const RESET_PASSWORD_REQUEST = \"RESET_PASSWORD_REQUEST\";\nexport const RESET_PASSWORD_SUCCESS = \"RESET_PASSWORD_SUCCESS\";\nexport const RESET_PASSWORD_FAILED = \"RESET_PASSWORD_FAILED\";\nexport function register(email, password, name) {\n  return function (dispatch) {\n    dispatch({\n      type: REGISTER_REQUEST\n    });\n    fetch(baseUrl + \"auth/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password,\n        name\n      })\n    }).then(checkResponse).then(res => {\n      if (res.success) {\n        setCookie('token', res.accessToken);\n        localStorage.setItem('refreshToken', res.refreshToken);\n        dispatch({\n          type: REGISTER_SUCCESS,\n          user: res.user\n        });\n      } else dispatch({\n        type: REGISTER_FAILED\n      });\n    }).catch(err => {\n      console.log(err);\n      dispatch({\n        type: REGISTER_FAILED\n      });\n    });\n  };\n}\nexport function login(email, password) {\n  return function (dispatch) {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    fetch(baseUrl + \"auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"email\": email,\n        \"password\": password\n      })\n    }).then(checkResponse).then(data => {\n      if (data.success) {\n        setCookie('token', data.accessToken);\n        localStorage.setItem('refreshToken', data.refreshToken);\n        dispatch({\n          type: LOGIN_SUCCESS,\n          user: data.user\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FAILED\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch({\n        type: LOGIN_FAILED\n      });\n    });\n  };\n}\nexport function updateToken() {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_TOKEN_REQUEST\n    });\n    fetch(baseUrl + \"auth/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token: localStorage.getItem('refreshToken')\n      })\n    }).then(checkResponse).then(res => {\n      if (res.success) {\n        setCookie('token', res.accessToken);\n        localStorage.setItem('refreshToken', res.refreshToken);\n        dispatch({\n          type: UPDATE_TOKEN_SUCCESS\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch({\n        type: UPDATE_TOKEN_FAILED\n      });\n    });\n  };\n}\nexport function logout() {\n  return function (dispatch) {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    fetch(baseUrl + \"auth/logout\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token: localStorage.getItem('refreshToken')\n      })\n    }).then(checkResponse).then(data => {\n      if (data.success) {\n        localStorage.removeItem('refreshToken');\n        deleteCookie('token');\n        dispatch({\n          type: LOGOUT_SUCCESS\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch({\n        type: LOGOUT_FAILED\n      });\n    });\n  };\n}\nexport function getUser() {\n  return function (dispatch) {\n    dispatch({\n      type: USER_REQUEST\n    });\n    fetch(baseUrl + \"auth/user\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: getCookie('token')\n      }\n    }).then(checkResponse).then(data => {\n      if (data.success) {\n        dispatch({\n          type: USER_SUCCESS,\n          user: data.user\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (localStorage.getItem('refreshToken')) {\n        dispatch(updateToken());\n        dispatch(getUser());\n      } else {\n        dispatch({\n          type: USER_FAILED\n        });\n      }\n    });\n  };\n}\nexport function updateUser(email, name) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_USER_REQUEST\n    });\n    fetch(baseUrl + \"auth/user\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: getCookie('token')\n      },\n      body: JSON.stringify({\n        email,\n        name\n      })\n    }).then(checkResponse).then(data => {\n      console.log(data);\n\n      if (data.success) {\n        dispatch({\n          type: UPDATE_USER_SUCCESS,\n          user: data.user\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (localStorage.getItem('refreshToken')) {\n        dispatch(updateToken());\n        dispatch(updateUser(email, name));\n      } else {\n        dispatch({\n          type: UPDATE_USER_FAILED\n        });\n      }\n    });\n  };\n}\nexport function forgotPassword(email) {\n  return function (dispatch) {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    fetch(baseUrl + \"password-reset\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email\n      })\n    }).then(checkResponse).then(res => {\n      if (res.success) {\n        dispatch({\n          type: FORGOT_PASSWORD_SUCCESS\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch({\n        type: FORGOT_PASSWORD_FAILED\n      });\n    });\n  };\n}\nexport function resetPassword(password, token) {\n  return function (dispatch) {\n    dispatch({\n      type: RESET_PASSWORD_REQUEST\n    });\n    fetch(baseUrl + \"password-reset/reset\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password,\n        token\n      })\n    }).then(checkResponse).then(data => {\n      if (data.success) {\n        dispatch({\n          type: RESET_PASSWORD_SUCCESS\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch({\n        type: RESET_PASSWORD_FAILED\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annaplokhotnyuk/Documents/react-burger/react-burger/src/services/actions/auth.js"],"names":["setCookie","deleteCookie","getCookie","checkResponse","baseUrl","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILED","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILED","UPDATE_TOKEN_REQUEST","UPDATE_TOKEN_SUCCESS","UPDATE_TOKEN_FAILED","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILED","USER_REQUEST","USER_SUCCESS","USER_FAILED","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILED","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAILED","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAILED","register","email","password","name","dispatch","type","fetch","method","headers","body","JSON","stringify","then","res","success","accessToken","localStorage","setItem","refreshToken","user","catch","err","console","log","login","data","updateToken","token","getItem","logout","removeItem","getUser","Authorization","updateUser","forgotPassword","resetPassword"],"mappings":"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","sourcesContent":["import {\n    setCookie,\n    deleteCookie,\n    getCookie,\n    checkResponse\n} from '../utils.ts';\nimport {\n    baseUrl\n} from '../../utils/api.ts';\n\nexport const REGISTER_REQUEST = \"REGISTER_REQUEST\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAILED = \"REGISTER_FAILED\";\nexport const LOGIN_REQUEST = \"REGISTER_REQUEST\";\nexport const LOGIN_SUCCESS = \"REGISTER_SUCCESS\";\nexport const LOGIN_FAILED = \"REGISTER_FAILED\";\nexport const UPDATE_TOKEN_REQUEST = \"UPDATE_TOKEN_REQUEST\";\nexport const UPDATE_TOKEN_SUCCESS = \"UPDATE_TOKEN_SUCCESS\";\nexport const UPDATE_TOKEN_FAILED = \"UPDATE_TOKEN_FAILED\";\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILED = \"LOGOUT_FAILED\";\nexport const USER_REQUEST = \"USER_REQUEST\";\nexport const USER_SUCCESS = \"USER_SUCCESS\";\nexport const USER_FAILED = \"USER_FAILED\";\nexport const UPDATE_USER_REQUEST = \"UPDATE_USER_REQUEST\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILED = \"UPDATE_USER_FAILED\";\nexport const FORGOT_PASSWORD_REQUEST = \"FORGOT_PASSWORD_REQUEST\";\nexport const FORGOT_PASSWORD_SUCCESS = \"FORGOT_PASSWORD_SUCCESS\";\nexport const FORGOT_PASSWORD_FAILED = \"FORGOT_PASSWORD_FAILED\";\nexport const RESET_PASSWORD_REQUEST = \"RESET_PASSWORD_REQUEST\";\nexport const RESET_PASSWORD_SUCCESS = \"RESET_PASSWORD_SUCCESS\";\nexport const RESET_PASSWORD_FAILED = \"RESET_PASSWORD_FAILED\";\n\nexport function register(email, password, name) {\n    return function (dispatch) {\n        dispatch({\n            type: REGISTER_REQUEST\n        });\n        fetch(baseUrl + \"auth/register\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email,\n                    password,\n                    name\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    setCookie('token', res.accessToken);\n                    localStorage.setItem('refreshToken', res.refreshToken);\n                    dispatch({\n                        type: REGISTER_SUCCESS,\n                        user: res.user\n                    });\n                }\n                else dispatch({\n                    type: REGISTER_FAILED\n                })\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch({\n                    type: REGISTER_FAILED\n                })\n            });\n    }\n}\n\nexport function login(email, password) {\n    return function (dispatch) {\n        dispatch({\n            type: LOGIN_REQUEST\n        });\n        fetch(baseUrl + \"auth/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    \"email\": email,\n                    \"password\": password\n                }),\n            })\n            .then(checkResponse)\n            .then(data => {\n                if (data.success) {\n                    setCookie('token', data.accessToken);\n                    localStorage.setItem('refreshToken', data.refreshToken);\n                    dispatch({\n                        type: LOGIN_SUCCESS,\n                        user: data.user\n                    });\n                } else {\n                dispatch({\n                    type: LOGIN_FAILED\n                })}\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch({\n                    type: LOGIN_FAILED\n                })\n            });\n    }\n}\n\nexport function updateToken() {\n    return function (dispatch) {\n        dispatch({\n            type: UPDATE_TOKEN_REQUEST\n        });\n        fetch(baseUrl + \"auth/token\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    token: localStorage.getItem('refreshToken')\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    setCookie('token', res.accessToken);\n                    localStorage.setItem('refreshToken', res.refreshToken);\n                    dispatch({\n                        type: UPDATE_TOKEN_SUCCESS\n                    });\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch({\n                    type: UPDATE_TOKEN_FAILED\n                })\n            });\n    }\n}\n\nexport function logout() {\n    return function (dispatch) {\n        dispatch({\n            type: LOGOUT_REQUEST\n        });\n        fetch(baseUrl + \"auth/logout\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    token: localStorage.getItem('refreshToken')\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    localStorage.removeItem('refreshToken');\n                    deleteCookie('token');\n                    dispatch({\n                        type: LOGOUT_SUCCESS\n                    });\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch({\n                    type: LOGOUT_FAILED\n                })\n            });\n    }\n}\n\nexport function getUser() {\n    return function (dispatch) {\n        dispatch({\n            type: USER_REQUEST\n        });\n        fetch(baseUrl + \"auth/user\", {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: getCookie('token'),\n                },\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    dispatch({\n                        type: USER_SUCCESS,\n                        user: data.user\n                    });\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                if (localStorage.getItem('refreshToken')) {\n                    dispatch(updateToken());\n                    dispatch(getUser());\n                } else {\n                    dispatch({\n                        type: USER_FAILED\n                    })\n                }\n            });\n    }\n}\n\nexport function updateUser(email, name) {\n    return function (dispatch) {\n        dispatch({\n            type: UPDATE_USER_REQUEST\n        });\n        fetch(baseUrl + \"auth/user\", {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: getCookie('token'),\n                },\n                body: JSON.stringify({\n                    email,\n                    name\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                console.log(data)\n                if (data.success) {\n                    dispatch({\n                        type: UPDATE_USER_SUCCESS,\n                        user: data.user\n                    });\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                if (localStorage.getItem('refreshToken')) {\n                    dispatch(updateToken());\n                    dispatch(updateUser(email, name));\n                } else {\n                    dispatch({\n                        type: UPDATE_USER_FAILED\n                    })\n                }\n            });\n    }\n}\n\nexport function forgotPassword(email) {\n    return function (dispatch) {\n        dispatch({\n            type: FORGOT_PASSWORD_REQUEST\n        });\n        fetch(baseUrl + \"password-reset\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    dispatch({\n                        type: FORGOT_PASSWORD_SUCCESS\n                    });\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch({\n                    type: FORGOT_PASSWORD_FAILED\n                })\n            });\n    }\n}\n\nexport function resetPassword(password, token) {\n    return function (dispatch) {\n        dispatch({\n            type: RESET_PASSWORD_REQUEST\n        });\n        fetch(baseUrl + \"password-reset/reset\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    password,\n                    token\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    dispatch({\n                        type: RESET_PASSWORD_SUCCESS\n                    });\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch({\n                    type: RESET_PASSWORD_FAILED\n                })\n            });\n    }\n}"]},"metadata":{},"sourceType":"module"}