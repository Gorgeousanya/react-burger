{"ast":null,"code":"import { setCookie, deleteCookie, getCookie, checkResponse } from '../utils';\nimport { baseUrl } from '../../utils/api';\nexport const REGISTER_REQUEST = \"REGISTER_REQUEST\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_ERROR = \"REGISTER_ERROR\";\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\nexport const UPDATE_TOKEN_REQUEST = \"UPDATE_TOKEN_REQUEST\";\nexport const UPDATE_TOKEN_SUCCESS = \"UPDATE_TOKEN_SUCCESS\";\nexport const UPDATE_TOKEN_ERROR = \"UPDATE_TOKEN_ERROR\";\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_ERROR = \"LOGOUT_ERROR\";\nexport const USER_REQUEST = \"USER_REQUEST\";\nexport const USER_SUCCESS = \"USER_SUCCESS\";\nexport const USER_ERROR = \"USER_ERROR\";\nexport const UPDATE_USER_REQUEST = \"UPDATE_USER_REQUEST\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_ERROR = \"UPDATE_USER_ERROR\";\nexport const FORGOT_PASSWORD_REQUEST = \"FORGOT_PASSWORD_REQUEST\";\nexport const FORGOT_PASSWORD_SUCCESS = \"FORGOT_PASSWORD_SUCCESS\";\nexport const FORGOT_PASSWORD_ERROR = \"FORGOT_PASSWORD_ERROR\";\nexport const RESET_PASSWORD_REQUEST = \"RESET_PASSWORD_REQUEST\";\nexport const RESET_PASSWORD_SUCCESS = \"RESET_PASSWORD_SUCCESS\";\nexport const RESET_PASSWORD_ERROR = \"RESET_PASSWORD_ERROR\";\n\nconst registerRequestAction = () => ({\n  type: REGISTER_REQUEST\n});\n\nconst registerSuccessAction = user => ({\n  type: REGISTER_SUCCESS,\n  user\n});\n\nconst registerErrorAction = () => ({\n  type: REGISTER_ERROR\n});\n\nconst loginRequestAction = () => ({\n  type: LOGIN_REQUEST\n});\n\nconst loginSuccessAction = user => ({\n  type: LOGIN_SUCCESS,\n  user\n});\n\nconst loginErrorAction = () => ({\n  type: LOGIN_ERROR\n});\n\nconst updateTokenRequestAction = () => ({\n  type: UPDATE_TOKEN_REQUEST\n});\n\nconst updateTokenSuccessAction = () => ({\n  type: UPDATE_TOKEN_SUCCESS\n});\n\nconst updateTokenErrorAction = () => ({\n  type: UPDATE_TOKEN_ERROR\n});\n\nconst logoutRequestAction = () => ({\n  type: LOGOUT_REQUEST\n});\n\nconst logoutSuccessAction = () => ({\n  type: LOGOUT_SUCCESS\n});\n\nconst logoutErrorAction = () => ({\n  type: LOGOUT_ERROR\n});\n\nconst userRequestAction = () => ({\n  type: USER_REQUEST\n});\n\nconst userSuccessAction = user => ({\n  type: USER_SUCCESS,\n  user\n});\n\nconst userErrorAction = () => ({\n  type: USER_ERROR\n});\n\nconst updateUserRequestAction = () => ({\n  type: UPDATE_USER_REQUEST\n});\n\nconst updateUserSuccessAction = user => ({\n  type: UPDATE_USER_SUCCESS,\n  user\n});\n\nconst updateUserErrorAction = () => ({\n  type: UPDATE_USER_ERROR\n});\n\nconst forgotPasswordRequestAction = () => ({\n  type: FORGOT_PASSWORD_REQUEST\n});\n\nconst forgotPasswordSuccessAction = () => ({\n  type: FORGOT_PASSWORD_SUCCESS\n});\n\nconst forgotPasswordErrorAction = () => ({\n  type: FORGOT_PASSWORD_ERROR\n});\n\nconst resetPasswordRequestAction = () => ({\n  type: RESET_PASSWORD_REQUEST\n});\n\nconst resetPasswordSuccessAction = () => ({\n  type: RESET_PASSWORD_SUCCESS\n});\n\nconst resetPasswordErrorAction = () => ({\n  type: RESET_PASSWORD_ERROR\n});\n\nexport const register = (email, password, name) => {\n  return function (dispatch) {\n    dispatch(registerRequestAction());\n    fetch(baseUrl + \"auth/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password,\n        name\n      })\n    }).then(checkResponse).then(res => {\n      if (res.success) {\n        setCookie('token', res.accessToken);\n        localStorage.setItem('refreshToken', res.refreshToken);\n        dispatch(registerSuccessAction(res.user));\n      } else dispatch(registerErrorAction());\n    }).catch(err => {\n      console.log(err);\n      dispatch(registerErrorAction());\n    });\n  };\n};\nexport const login = (email, password) => {\n  return function (dispatch) {\n    dispatch(loginRequestAction());\n    fetch(baseUrl + \"auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"email\": email,\n        \"password\": password\n      })\n    }).then(checkResponse).then(data => {\n      if (data.success) {\n        setCookie('token', data.accessToken);\n        localStorage.setItem('refreshToken', data.refreshToken);\n        dispatch(loginSuccessAction(data.user));\n      } else {\n        dispatch(loginErrorAction());\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginErrorAction());\n    });\n  };\n};\nexport const updateToken = () => {\n  return function (dispatch) {\n    dispatch(updateTokenRequestAction());\n    fetch(baseUrl + \"auth/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token: localStorage.getItem('refreshToken')\n      })\n    }).then(checkResponse).then(res => {\n      if (res.success) {\n        setCookie('token', res.accessToken);\n        localStorage.setItem('refreshToken', res.refreshToken);\n        dispatch(updateTokenSuccessAction());\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch(updateTokenErrorAction());\n    });\n  };\n};\nexport const logout = () => {\n  return function (dispatch) {\n    dispatch(logoutRequestAction());\n    fetch(baseUrl + \"auth/logout\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token: localStorage.getItem('refreshToken')\n      })\n    }).then(checkResponse).then(data => {\n      if (data.success) {\n        localStorage.removeItem('refreshToken');\n        deleteCookie('token');\n        dispatch(logoutSuccessAction());\n      } else {\n        dispatch(logoutErrorAction());\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch(logoutErrorAction());\n    });\n  };\n};\nexport const getUser = () => {\n  return function (dispatch) {\n    dispatch(userRequestAction());\n    fetch(baseUrl + \"auth/user\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${getCookie('token')}`\n      }\n    }).then(checkResponse).then(data => {\n      if (data.success) {\n        dispatch(userSuccessAction(data.user));\n      }\n    }).catch(err => {\n      console.log(err); // if (localStorage.getItem('refreshToken')) {\n      //     dispatch(updateToken());\n      //     dispatch(getUser());\n      // } else {\n\n      dispatch(userErrorAction()); // }\n    });\n  };\n};\nexport const updateUser = (email, name) => {\n  return function (dispatch) {\n    dispatch(updateUserRequestAction());\n    fetch(baseUrl + \"auth/user\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${getCookie('token')}`\n      },\n      body: JSON.stringify({\n        email,\n        name\n      })\n    }).then(checkResponse).then(data => {\n      console.log(data);\n\n      if (data.success) {\n        dispatch(updateUserSuccessAction(data.user));\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (localStorage.getItem('refreshToken')) {\n        dispatch(updateToken());\n        dispatch(updateUser(email, name));\n      } else {\n        dispatch(updateUserErrorAction());\n      }\n    });\n  };\n};\nexport const forgotPassword = email => {\n  return function (dispatch) {\n    dispatch(forgotPasswordRequestAction());\n    fetch(baseUrl + \"password-reset\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email\n      })\n    }).then(checkResponse).then(res => {\n      if (res.success) {\n        dispatch(forgotPasswordSuccessAction());\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch(forgotPasswordErrorAction());\n    });\n  };\n};\nexport const resetPassword = (password, token) => {\n  return function (dispatch) {\n    dispatch(resetPasswordRequestAction());\n    fetch(baseUrl + \"password-reset/reset\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password,\n        token\n      })\n    }).then(checkResponse).then(data => {\n      if (data.success) {\n        dispatch(resetPasswordSuccessAction());\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch(resetPasswordErrorAction());\n    });\n  };\n};","map":{"version":3,"sources":["/Users/annaplokhotnyuk/Documents/react-burger/src/services/actions/auth.ts"],"names":["setCookie","deleteCookie","getCookie","checkResponse","baseUrl","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_ERROR","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","UPDATE_TOKEN_REQUEST","UPDATE_TOKEN_SUCCESS","UPDATE_TOKEN_ERROR","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_ERROR","USER_REQUEST","USER_SUCCESS","USER_ERROR","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","registerRequestAction","type","registerSuccessAction","user","registerErrorAction","loginRequestAction","loginSuccessAction","loginErrorAction","updateTokenRequestAction","updateTokenSuccessAction","updateTokenErrorAction","logoutRequestAction","logoutSuccessAction","logoutErrorAction","userRequestAction","userSuccessAction","userErrorAction","updateUserRequestAction","updateUserSuccessAction","updateUserErrorAction","forgotPasswordRequestAction","forgotPasswordSuccessAction","forgotPasswordErrorAction","resetPasswordRequestAction","resetPasswordSuccessAction","resetPasswordErrorAction","register","email","password","name","dispatch","fetch","method","headers","body","JSON","stringify","then","res","success","accessToken","localStorage","setItem","refreshToken","catch","err","console","log","login","data","updateToken","token","getItem","logout","removeItem","getUser","Authorization","updateUser","forgotPassword","resetPassword"],"mappings":"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","sourcesContent":["import {\n    setCookie,\n    deleteCookie,\n    getCookie,\n    checkResponse,\n    AppDispatch, \n    AppThunk\n} from '../utils';\nimport {\n    baseUrl\n} from '../../utils/api';\n\nexport const REGISTER_REQUEST: \"REGISTER_REQUEST\" = \"REGISTER_REQUEST\";\nexport const REGISTER_SUCCESS: \"REGISTER_SUCCESS\" = \"REGISTER_SUCCESS\";\nexport const REGISTER_ERROR: \"REGISTER_ERROR\" = \"REGISTER_ERROR\";\nexport const LOGIN_REQUEST: \"LOGIN_REQUEST\" = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS: \"LOGIN_SUCCESS\" = \"LOGIN_SUCCESS\";\nexport const LOGIN_ERROR: \"LOGIN_ERROR\" = \"LOGIN_ERROR\";\nexport const UPDATE_TOKEN_REQUEST: \"UPDATE_TOKEN_REQUEST\" = \"UPDATE_TOKEN_REQUEST\";\nexport const UPDATE_TOKEN_SUCCESS: \"UPDATE_TOKEN_SUCCESS\" = \"UPDATE_TOKEN_SUCCESS\";\nexport const UPDATE_TOKEN_ERROR: \"UPDATE_TOKEN_ERROR\" = \"UPDATE_TOKEN_ERROR\";\nexport const LOGOUT_REQUEST: \"LOGOUT_REQUEST\" = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS: \"LOGOUT_SUCCESS\" = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_ERROR: \"LOGOUT_ERROR\" = \"LOGOUT_ERROR\";\nexport const USER_REQUEST: \"USER_REQUEST\" = \"USER_REQUEST\";\nexport const USER_SUCCESS: \"USER_SUCCESS\" = \"USER_SUCCESS\";\nexport const USER_ERROR: \"USER_ERROR\" = \"USER_ERROR\";\nexport const UPDATE_USER_REQUEST: \"UPDATE_USER_REQUEST\" = \"UPDATE_USER_REQUEST\";\nexport const UPDATE_USER_SUCCESS: \"UPDATE_USER_SUCCESS\" = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_ERROR: \"UPDATE_USER_ERROR\" = \"UPDATE_USER_ERROR\";\nexport const FORGOT_PASSWORD_REQUEST: \"FORGOT_PASSWORD_REQUEST\" = \"FORGOT_PASSWORD_REQUEST\";\nexport const FORGOT_PASSWORD_SUCCESS: \"FORGOT_PASSWORD_SUCCESS\" = \"FORGOT_PASSWORD_SUCCESS\";\nexport const FORGOT_PASSWORD_ERROR: \"FORGOT_PASSWORD_ERROR\" = \"FORGOT_PASSWORD_ERROR\";\nexport const RESET_PASSWORD_REQUEST: \"RESET_PASSWORD_REQUEST\" = \"RESET_PASSWORD_REQUEST\";\nexport const RESET_PASSWORD_SUCCESS: \"RESET_PASSWORD_SUCCESS\" = \"RESET_PASSWORD_SUCCESS\";\nexport const RESET_PASSWORD_ERROR: \"RESET_PASSWORD_ERROR\" = \"RESET_PASSWORD_ERROR\";\n\nexport interface IRegisterRequestAction {\n    readonly type: typeof REGISTER_REQUEST;\n}\n\nexport interface IRegisterSuccessAction {\n    readonly type: typeof REGISTER_SUCCESS;\n    readonly user: {\n        name: string;\n        email: string;\n    };\n}\n\nexport interface IRegisterErrorAction {\n    readonly type: typeof REGISTER_ERROR;\n}\n\nexport interface ILoginRequestAction {\n    readonly type: typeof LOGIN_REQUEST;\n}\n\nexport interface ILoginSuccessAction {\n    readonly type: typeof LOGIN_SUCCESS;\n    readonly user: {\n        name: string;\n        email: string;\n    };\n}\n\nexport interface ILoginErrorAction {\n    readonly type: typeof LOGIN_ERROR;\n}\n\nexport interface IUpdateTokenRequestAction {\n    readonly type: typeof UPDATE_TOKEN_REQUEST;\n}\n\nexport interface IUpdateTokenSuccessAction {\n    readonly type: typeof UPDATE_TOKEN_SUCCESS;\n}\n\nexport interface IUpdateTokenErrorAction {\n    readonly type: typeof UPDATE_TOKEN_ERROR;\n}\n\nexport interface ILogoutRequestAction {\n    readonly type: typeof LOGOUT_REQUEST;\n}\n\nexport interface ILogoutSuccessAction {\n    readonly type: typeof LOGOUT_SUCCESS;\n}\n\nexport interface ILogoutErrorAction {\n    readonly type: typeof LOGOUT_ERROR;\n}\n\nexport interface IUserRequestAction {\n    readonly type: typeof USER_REQUEST;\n}\n\nexport interface IUserSuccessAction {\n    readonly type: typeof USER_SUCCESS;\n    readonly user: {\n        name: string;\n        email: string;\n    };\n}\n\nexport interface IUserErrorAction {\n    readonly type: typeof USER_ERROR;\n}\n\nexport interface IUpdateUserRequestAction {\n    readonly type: typeof UPDATE_USER_REQUEST;\n}\n\nexport interface IUpdateUserSuccessAction {\n    readonly type: typeof UPDATE_USER_SUCCESS;\n    readonly user: {\n        name: string;\n        email: string;\n    };\n}\n\nexport interface IUpdateUserErrorAction {\n    readonly type: typeof UPDATE_USER_ERROR;\n}\n\nexport interface IForgotPasswordRequestAction {\n    readonly type: typeof FORGOT_PASSWORD_REQUEST;\n}\n\nexport interface IForgotPasswordSuccessAction {\n    readonly type: typeof FORGOT_PASSWORD_SUCCESS;\n}\n\nexport interface IForgotPasswordErrorAction {\n    readonly type: typeof FORGOT_PASSWORD_ERROR;\n}\n\nexport interface IResetPasswordRequestAction {\n    readonly type: typeof RESET_PASSWORD_REQUEST;\n}\n\nexport interface IResetPasswordSuccessAction {\n    readonly type: typeof RESET_PASSWORD_SUCCESS;\n}\n\nexport interface IResetPasswordErrorAction {\n    readonly type: typeof RESET_PASSWORD_ERROR;\n}\n\nconst registerRequestAction = (): IRegisterRequestAction => ({ type: REGISTER_REQUEST });\nconst registerSuccessAction = (user: {\n    name: string;\n    email: string;\n}): IRegisterSuccessAction => ({ type: REGISTER_SUCCESS, user });\nconst registerErrorAction = (): IRegisterErrorAction => ({ type: REGISTER_ERROR });\nconst loginRequestAction = (): ILoginRequestAction => ({ type: LOGIN_REQUEST });\nconst loginSuccessAction = (user: {\n    name: string;\n    email: string;\n}): ILoginSuccessAction => ({ type: LOGIN_SUCCESS, user });\nconst loginErrorAction = (): ILoginErrorAction => ({ type: LOGIN_ERROR });\nconst updateTokenRequestAction = (): IUpdateTokenRequestAction => ({ type: UPDATE_TOKEN_REQUEST });\nconst updateTokenSuccessAction = (): IUpdateTokenSuccessAction => ({ type: UPDATE_TOKEN_SUCCESS });\nconst updateTokenErrorAction = (): IUpdateTokenErrorAction => ({ type: UPDATE_TOKEN_ERROR });\nconst logoutRequestAction = (): ILogoutRequestAction => ({ type: LOGOUT_REQUEST });\nconst logoutSuccessAction = (): ILogoutSuccessAction => ({ type: LOGOUT_SUCCESS });\nconst logoutErrorAction = (): ILogoutErrorAction => ({ type: LOGOUT_ERROR });\nconst userRequestAction = (): IUserRequestAction => ({ type: USER_REQUEST });\nconst userSuccessAction = (user: {\n    name: string;\n    email: string;\n}): IUserSuccessAction => ({ type: USER_SUCCESS, user });\nconst userErrorAction = (): IUserErrorAction => ({ type: USER_ERROR });\nconst updateUserRequestAction = (): IUpdateUserRequestAction => ({ type: UPDATE_USER_REQUEST });\nconst updateUserSuccessAction = (user: {\n    name: string;\n    email: string;\n}): IUpdateUserSuccessAction => ({ type: UPDATE_USER_SUCCESS, user });\nconst updateUserErrorAction = (): IUpdateUserErrorAction => ({ type: UPDATE_USER_ERROR });\nconst forgotPasswordRequestAction = (): IForgotPasswordRequestAction => ({ type: FORGOT_PASSWORD_REQUEST });\nconst forgotPasswordSuccessAction = (): IForgotPasswordSuccessAction => ({ type: FORGOT_PASSWORD_SUCCESS });\nconst forgotPasswordErrorAction = (): IForgotPasswordErrorAction => ({ type: FORGOT_PASSWORD_ERROR });\nconst resetPasswordRequestAction = (): IResetPasswordRequestAction => ({ type: RESET_PASSWORD_REQUEST });\nconst resetPasswordSuccessAction = (): IResetPasswordSuccessAction => ({ type: RESET_PASSWORD_SUCCESS });\nconst resetPasswordErrorAction = (): IResetPasswordErrorAction => ({ type: RESET_PASSWORD_ERROR });\n\nexport const register: AppThunk = (email: string, password: string, name: string) => {\n    return function (dispatch: AppDispatch) {\n        dispatch(registerRequestAction());\n        fetch(baseUrl + \"auth/register\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email,\n                    password,\n                    name\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    setCookie('token', res.accessToken);\n                    localStorage.setItem('refreshToken', res.refreshToken);\n                    dispatch(registerSuccessAction(res.user));\n                }\n                else dispatch(registerErrorAction())\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(registerErrorAction())\n            });\n    }\n}\n\nexport const login: AppThunk = (email: string, password: string) => {\n    return function (dispatch: AppDispatch) {\n        dispatch(loginRequestAction());\n        fetch(baseUrl + \"auth/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    \"email\": email,\n                    \"password\": password\n                }),\n            })\n            .then(checkResponse)\n            .then(data => {\n                if (data.success) {\n                    setCookie('token', data.accessToken);\n                    localStorage.setItem('refreshToken', data.refreshToken);\n                    dispatch(loginSuccessAction(data.user));\n                } else {\n                dispatch(loginErrorAction())}\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(loginErrorAction())\n            });\n    }\n}\n\nexport const updateToken: AppThunk = () => {\n    return function (dispatch: AppDispatch) {\n        dispatch(updateTokenRequestAction());\n        fetch(baseUrl + \"auth/token\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    token: localStorage.getItem('refreshToken')\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    setCookie('token', res.accessToken);\n                    localStorage.setItem('refreshToken', res.refreshToken);\n                    dispatch(updateTokenSuccessAction());\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(updateTokenErrorAction())\n            });\n    }\n}\n\nexport const logout: AppThunk = () => {\n    return function (dispatch: AppDispatch) {\n        dispatch(logoutRequestAction());\n        fetch(baseUrl + \"auth/logout\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    token: localStorage.getItem('refreshToken')\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    localStorage.removeItem('refreshToken');\n                    deleteCookie('token');\n                    dispatch(logoutSuccessAction());\n                }\n                else {\n                    dispatch(logoutErrorAction())\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(logoutErrorAction())\n            });\n    }\n}\n\nexport const getUser: AppThunk = () => {\n    return function (dispatch) {\n        dispatch(userRequestAction());\n        fetch(baseUrl + \"auth/user\", {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `${getCookie('token')}`,\n                },\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    dispatch(userSuccessAction(data.user));\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                // if (localStorage.getItem('refreshToken')) {\n                //     dispatch(updateToken());\n                //     dispatch(getUser());\n                // } else {\n                    dispatch(userErrorAction())\n                // }\n            });\n    }\n}\n\nexport const updateUser: AppThunk = (email: string, name: string) => {\n    return function (dispatch) {\n        dispatch(updateUserRequestAction());\n        fetch(baseUrl + \"auth/user\", {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `${getCookie('token')}`,\n                },\n                body: JSON.stringify({\n                    email,\n                    name\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                console.log(data)\n                if (data.success) {\n                    dispatch(updateUserSuccessAction(data.user));\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                if (localStorage.getItem('refreshToken')) {\n                    dispatch(updateToken());\n                    dispatch(updateUser(email, name));\n                } else {\n                    dispatch(updateUserErrorAction())\n                }\n            });\n    }\n}\n\nexport const forgotPassword: AppThunk = (email: string) => {\n    return function (dispatch: AppDispatch) {\n        dispatch(forgotPasswordRequestAction());\n        fetch(baseUrl + \"password-reset\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email\n                }),\n            })\n            .then(checkResponse)\n            .then((res) => {\n                if (res.success) {\n                    dispatch(forgotPasswordSuccessAction());\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(forgotPasswordErrorAction())\n            });\n    }\n}\n\nexport const resetPassword: AppThunk = (password: string, token: string) => {\n    return function (dispatch: AppDispatch) {\n        dispatch(resetPasswordRequestAction());\n        fetch(baseUrl + \"password-reset/reset\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    password,\n                    token\n                }),\n            })\n            .then(checkResponse)\n            .then((data) => {\n                if (data.success) {\n                    dispatch(resetPasswordSuccessAction());\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(resetPasswordErrorAction())\n            });\n    }\n}\n\nexport type TAuthActions = \n    | IRegisterRequestAction\n    | IRegisterSuccessAction\n    | IRegisterErrorAction\n    | ILoginRequestAction\n    | ILoginSuccessAction\n    | ILoginErrorAction\n    | IUpdateTokenRequestAction\n    | IUpdateTokenSuccessAction\n    | IUpdateTokenErrorAction\n    | ILogoutRequestAction\n    | ILogoutSuccessAction\n    | ILogoutErrorAction\n    | IUserRequestAction\n    | IUserSuccessAction\n    | IUserErrorAction\n    | IUpdateUserRequestAction\n    | IUpdateUserSuccessAction\n    | IUpdateUserErrorAction\n    | IForgotPasswordRequestAction\n    | IForgotPasswordSuccessAction\n    | IForgotPasswordErrorAction\n    | IResetPasswordRequestAction\n    | IResetPasswordSuccessAction\n    | IResetPasswordErrorAction;"]},"metadata":{},"sourceType":"module"}